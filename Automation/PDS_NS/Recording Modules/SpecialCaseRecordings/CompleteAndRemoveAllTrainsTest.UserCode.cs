///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

using PDS_CORE.Code_Utils;
using Oracle.Code_Utils;
using PDS_NS.UserCodeCollections;
using STE.Code_Utils;

namespace PDS_NS.Recording_Modules.SpecialCaseRecordings
{
    public partial class CompleteAndRemoveAllTrainsTest
    {
    	
    	public static global::PDS_NS.Trains_Repo Trainsrepo = global::PDS_NS.Trains_Repo.Instance;
    	public static global::PDS_NS.Trackline_Repo Tracklinerepo = global::PDS_NS.Trackline_Repo.Instance;
    	
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void TestStuff(int iterations, int trainsPerIteration)
        {
        	for (int x = 0; x < iterations; x++)
        	{
	        	string trainSeed = "";
	        	char trainSeedLetter = 'A';
	        	int counter = 0;
	        	for (int i = 0; i < trainsPerIteration; i++)
	        	{
	        		if (counter == 10) {
	        			counter = 0;
	        			trainSeedLetter++;
	        		}
	        		trainSeed = trainSeedLetter.ToString() + counter.ToString();
		        	NS_MIS_Messages.NS_SendCreateSchedule_43Simple(trainSeed,"NS","","0","3","3","IM","174H","159H","Defaults", "Local");
		        	NS_MIS_Messages.NS_SendTrainSegment_48Simple(trainSeed,"174H","1","","0","E","C","174H","159H", "Local");
					// TODO: If you'd like to re-add create crew MIS, then first use: NS_CrewClass.RefactorAndCreateCrewMemberObject_CrewMemberRecords
					// This method spits out crew records of lengh 34 that can be passed into message definitions without additional formatting. Not my method. -DK
		        	// SendMISFileCollection_NS.NS_CreateCrewMember(trainSeed,"CREW1","C1","0","174H||174H|1|775.4||||EN|WK|D|R|DOE|123456789||15|E|15|E|480|E|4320|E|4320|E||||174H||174H|1|775.4||||EN|WK|A|B|ROE|123456789||15|E|15|E|480|E|4320|E|4320|E||||174H||174H|1|775.4||||EN|WK|T|T|TOE|123456789||15|E|15|E|480|E|4320|E|4320|E|||","Local");
		        	counter++;
	        	}
	        	NS_TrainMiscellaneous.NS_CompleteAndRemoveAllTrains_TrainStatusSummary(true);
        	}
//            if (Trainsrepo.Train_Sheet.SelfInfo.Exists(0))
//		    {
//    			NS_Trainsheet.NS_CloseTrainsheet();
//		    }
//    		
//    		NS_Trainsheet.NS_OpenTrainStatusSummary_MainMenu();
//    		//Find all train elements excluding rows with district information
//    		IList<Ranorex.Cell> trainIdCellList = Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.Self.Find<Ranorex.Cell>("row/cell[@columnindex='1' and @objectType='TRAIN']");
//    		List<string> trainIdList = new List<string>();
//    		foreach (Ranorex.Cell x in trainIdCellList)
//    		{
//    			trainIdList.Add(x.Element.GetAttributeValueText("Value"));
//    		}
//    		
//    		int trainCount = trainIdList.Count;
//    		if (trainCount == 0)
//    		{
//    			Ranorex.Report.Success("All Trains completed and removed");
//    			return;
//    		}
//    		
//    		foreach (string trainId in trainIdList)
//    		{
//    			Trainsrepo.TrainId = trainId;
//    			
//    			Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryRowByTrainID.TrainID.Click(WinForms.MouseButtons.Right);
//    			int retries = 0;
//    			while (!Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryMenu.SelfInfo.Exists(0) && retries < 2)
//    			{
//    				Ranorex.Delay.Milliseconds(500);
//    				Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryRowByTrainID.TrainID.Click(WinForms.MouseButtons.Right);
//    				retries++;
//    			}
//    			if (!Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryMenu.SelfInfo.Exists(0))
//    			{
//    				Ranorex.Report.Error("Menu did not appear when right clicking train in train status summary");
//    				continue;
//    			}
//    			Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryMenu.OpenTrainSheet.Click();
//    			
//    			//Complete the trip for the train
//    			Ranorex.Report.Info("Completing trip for train {"+trainId+"}.");
//    			NS_Trainsheet.NS_CompleteTripPlanForTrain("",false);
//    			
//    			//Remove train from Tracking
//    			Ranorex.Report.Info("Removing train {"+trainId+"} from tracking.");
//    			NS_TrainMiscellaneous.NS_RemoveTrainFromTracking_TrainStatusSummaryFunction(trainId, true, false);
//    			
//    			//Check if train has a crew to see if you need to remove any
//    			string engineerName = Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryRowByTrainID.EngineerName.GetAttributeValue<string>("Value");
//    			string conductorName = Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryRowByTrainID.ConductorName.GetAttributeValue<string>("Value");
//    			if (engineerName != "" || conductorName != "")
//    			{
//    				Ranorex.Report.Info("Removing crews for train {"+trainId+"}.");
//    				NS_Trainsheet.NS_RemoveCrewsForTrain("");
//    			}
//    			
//    			NS_Trainsheet.NS_TerminateTrain("");
//    			
//    			//Determine if train was removed from the Train Status Summary List
//    			if (Trainsrepo.Train_Status_Summary.TrainStatusSummaryTable.TrainStatusSummaryRowByTrainID.SelfInfo.Exists(0))
//    			{
//    				Ranorex.Report.Error("Unable to remove train {"+trainId+"}.");
//    			}
//    			NS_Trainsheet.NS_CloseTrainsheet();
//    		}
//    		
//    		if (false)
//    		{
//    			NS_Trainsheet.NS_CloseTrainStatusSummary();
//    		}
        }
    }
}
