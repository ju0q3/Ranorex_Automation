///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

using PDS_CORE.Code_Utils;
using STE.Code_Utils;
using PDS_NS.UserCodeCollections;

namespace PDS_NS.Recording_Modules.SpecialCaseRecordings
{
    public partial class SendCD_TCON_Iterative_NS
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Iterate_CD_TCON_NS(string scac, string section, string trainSeed, string origin, string passcount, string time, string timeZone, string timeType, string reportType, string trainCategory, string destination, string trainGroup, string stations, string crewSeed, string engineSeed, string crewMemberRecord, string crewSequenceNumber, string crewLineSegment, string districts, string assignedDivision, string helperCrewPoolId, string defaultDataApplied, string reportingSource, string purpose, string engineRecord, string Type, string optionalTrainClearance, string numLoads, string numEmpties, string tonnage, string length, string operativeBrakes, string totalBrakingForce, string speedConstraints, string speed, string speedClass, string axles, string milePost, string track, string orientation, string restrictionRecords, int iterationCount)
        {
        	STE.Code_Utils.SendMISFileCollection_NS.NS_CreateTrain(scac, section, trainSeed, origin, passcount, time, timeZone, timeType, origin, destination);
        	STE.Code_Utils.SendMISFileCollection_NS.NS_CreateSchedule(scac, section, trainSeed, reportType, trainCategory, trainGroup, origin, destination, stations);
        	        	
        	// Need to delay here to create a train clearance over the UI.
        	NS_Trainsheet.NS_OpenTrainsheet_MainMenu(trainSeed);
        	Ranorex.Delay.Seconds(60);
        	
        	
        	NS_PTC_Messages.SendCD_CSGN_NewCrew_NewEngine(trainSeed, crewSeed, engineSeed, crewMemberRecord, crewSequenceNumber, crewLineSegment, districts, assignedDivision, helperCrewPoolId,
        	                                              defaultDataApplied, passcount, origin, reportingSource, purpose, engineRecord);
        	
        	NS_PTC_Messages.SendCD_RABI(trainSeed, engineSeed, districts, Type, optionalTrainClearance);
        	
        	for (int i = 0; i < iterationCount; i++)
        	{
        		NS_PTC_Messages.SendCD_TCON(trainSeed, engineSeed, numLoads, numEmpties, tonnage, length, axles, operativeBrakes, totalBrakingForce,
        		                           speedConstraints, speed, speedClass, districts, milePost, track, orientation, engineRecord, restrictionRecords);
        		NS_PTC_Message_Validations.ValidateDC_AK01_ByContent("CD-TCON", "ACCEPT", "");
        	}
        	
        	
        }

    }
}
