///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

using PDS_CORE.Code_Utils;

namespace PDS_NS.Recording_Modules.SpecialCaseRecordings
{
    public partial class TestMissingAttributes_TECS_MIS_NS
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        public static bool shouldSucceed {get; set;}

        public void testTrainEngineConsistSummary(string trainSeed, string consistReportingLocation, string consistReportingPassCount, string consistReportingSource, string numberOfLoads, 
                                                  string numberOfEmpties, string trailingTonnage, string trainLength, string axles, string operativeBrakes, string totalBrakingForce, 
                                                  string maxCarWeights, string maxCarHeights, string maxCarWidths, string hazmatConstraints, string assignedDivision, string helperCrewPoolID, 
                                                  string engineReportingSource, string engineReportingLocation, string engineReportingPassCount, string defaultDataApplied, string purpose, 
                                                  string engines, string equipmentCode, string origin, string destination, string initial, string number, string workingStatus, 
                                                  bool engineScacMissing, bool consistScacMissing, bool eotScacMissing, bool engineSymbolMissing, bool consistSymbolMissing, bool eotSymbolMissing, 
                                                  bool engineDateMissing, bool consistDateMissing, bool eotDateMissing)
        {
            shouldSucceed = true;
        	
        	string speedConstraint = null;
        	
        	string protocolId = "1";
        	string msgId = "";
        	string traceId = "1";
        	string msgVersion = "0";        	
        	
            string trainSymbol = NS_TrainID.GetTrainSymbol(trainSeed);
            string scac = NS_TrainID.GetTrainSCAC(trainSeed);
            string section = NS_TrainID.GetTrainSection(trainSeed);
            string originDate = NS_TrainID.getOriginDate(trainSeed);
            
            string engineScac = defineOrReportVariableContents(scac, engineScacMissing, "SCAC (Engine Consist)");
            string consistScac = defineOrReportVariableContents(scac, consistScacMissing, "SCAC (TCSM)");
            string eotScac = defineOrReportVariableContents(scac, eotScacMissing, "SCAC (EOT)");
            string engineTrainSymbol = defineOrReportVariableContents(trainSymbol, engineSymbolMissing, "Train Symbol (Engine Consist)");
            string consistTrainSymbol = defineOrReportVariableContents(trainSymbol, consistSymbolMissing, "Train Symbol (TCSM)");
            string eotTrainSymbol = defineOrReportVariableContents(trainSymbol, eotSymbolMissing, "Train Symbol (EOT)");
            string engineDate = defineOrReportVariableContents(originDate, engineDateMissing, "Origin Date (Engine Consist)");
            string consistDate = defineOrReportVariableContents(originDate, consistDateMissing, "Origin Date (TCSM)");
            string eotDate = defineOrReportVariableContents(originDate, eotDateMissing, "Origin Date (EOT)");
                      
            STE.Code_Utils.messages.MIS.MIS_TrainEngineConsistSummaryConfig.createTrainEngineConsistSummaryConfig(protocolId, msgId, traceId, msgVersion, protocolId, msgId, traceId, msgVersion, engineScac, section, engineTrainSymbol,
                                                                                                                  engineDate, assignedDivision, helperCrewPoolID, engineReportingSource, engineReportingLocation, engineReportingPassCount,
                                                                                                                  defaultDataApplied, purpose, engines, // end of engine attributes, beginning of eot attributes
                                                                                                                  protocolId, msgId, traceId, msgVersion, eotScac, section, eotTrainSymbol, eotDate, equipmentCode, 
                                                                                                                  origin, destination, initial, number, workingStatus, // end of eot attributes, beginning of consist attributes
                                                                                                                  protocolId, msgId, traceId, msgVersion, consistScac, section, consistTrainSymbol, consistDate, consistReportingLocation, 
                                                                                                                  consistReportingPassCount, consistReportingSource, numberOfLoads, numberOfEmpties, trailingTonnage, trainLength,
                                                                                                                  axles, operativeBrakes, totalBrakingForce, speedConstraint, maxCarWeights, maxCarHeights, maxCarWidths, hazmatConstraints);
            STE.Code_Utils.ReceiveMISFileCollection_NS.clearFilters();
            STE.Code_Utils.ReceiveMISFileCollection_NS.addValueToFilters("<ERROR_CODE>9999</ERROR_CODE>");
            STE.Code_Utils.ReceiveMISFileCollection_NS.validateErrorMessage(5, false);
            STE.Code_Utils.ReceiveMISFileCollection_NS.clearFilters();
            
            // Check for presence of DC-TCON
//            STE.Code_Utils.ReceivePTCFileCollection_NS.validateDC_TCON_7(5, true);
        
        }
        
       
        
        public static string defineOrReportVariableContents(string definedVariable, bool isVariableMissing, string variableName)
        {
        	string outputVariable = "";
        	if (!isVariableMissing)
        	{
        		outputVariable = definedVariable;
        	} else {
        		Ranorex.Report.Info("TestStep", "The following field is blank: " + variableName);
        		shouldSucceed = false;
        	}
        	return outputVariable;
        }

    }
}
