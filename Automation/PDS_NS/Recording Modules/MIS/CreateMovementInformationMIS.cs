///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.MIS
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateMovementInformationMIS recording.
    /// </summary>
    [TestModule("8da0fbf8-76aa-4bcd-940a-177077456236", ModuleType.Recording, 1)]
    public partial class CreateMovementInformationMIS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static CreateMovementInformationMIS instance = new CreateMovementInformationMIS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateMovementInformationMIS()
        {
            scac = "";
            section = "";
            trainSeed = "";
            locationType = "";
            dataLocation = "";
            dataPassCount = "";
            dataTrackName = "";
            divisionNumber = "";
            dataDivision = "";
            dataDistrict = "";
            direction = "";
            typeOfReporting = "";
            tranmissionType = "";
            reportingTimeZone = "";
            currentCrewDest = "";
            etaTimeZone = "";
            alertEventKey = "";
            deviceID = "";
            ptas = "";
            reportingTime = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateMovementInformationMIS Instance
        {
            get { return instance; }
        }

#region Variables

        string _scac;

        /// <summary>
        /// Gets or sets the value of variable scac.
        /// </summary>
        [TestVariable("be22c185-0c0b-405d-8ba5-7c41265cbcfb")]
        public string scac
        {
            get { return _scac; }
            set { _scac = value; }
        }

        string _section;

        /// <summary>
        /// Gets or sets the value of variable section.
        /// </summary>
        [TestVariable("5385e10e-db58-4bf3-9cf8-e3ef2c0eaa77")]
        public string section
        {
            get { return _section; }
            set { _section = value; }
        }

        string _trainSeed;

        /// <summary>
        /// Gets or sets the value of variable trainSeed.
        /// </summary>
        [TestVariable("ce8f2028-f17a-45e0-ba09-b59e0b733b1e")]
        public string trainSeed
        {
            get { return _trainSeed; }
            set { _trainSeed = value; }
        }

        string _locationType;

        /// <summary>
        /// Gets or sets the value of variable locationType.
        /// </summary>
        [TestVariable("2e1fc143-991f-4139-99e9-fea7e50a8db7")]
        public string locationType
        {
            get { return _locationType; }
            set { _locationType = value; }
        }

        string _dataLocation;

        /// <summary>
        /// Gets or sets the value of variable dataLocation.
        /// </summary>
        [TestVariable("af91f6b2-0173-4ea8-8c4b-dfb2130f8d32")]
        public string dataLocation
        {
            get { return _dataLocation; }
            set { _dataLocation = value; }
        }

        string _dataPassCount;

        /// <summary>
        /// Gets or sets the value of variable dataPassCount.
        /// </summary>
        [TestVariable("be96be03-e020-4fe1-ad0b-81420fb2ea5a")]
        public string dataPassCount
        {
            get { return _dataPassCount; }
            set { _dataPassCount = value; }
        }

        string _dataTrackName;

        /// <summary>
        /// Gets or sets the value of variable dataTrackName.
        /// </summary>
        [TestVariable("d7203087-3ba1-40ed-9b82-d7c1be4d2e3f")]
        public string dataTrackName
        {
            get { return _dataTrackName; }
            set { _dataTrackName = value; }
        }

        string _divisionNumber;

        /// <summary>
        /// Gets or sets the value of variable divisionNumber.
        /// </summary>
        [TestVariable("3ffa188e-4d93-45e0-b10d-98afba2601ef")]
        public string divisionNumber
        {
            get { return _divisionNumber; }
            set { _divisionNumber = value; }
        }

        string _dataDivision;

        /// <summary>
        /// Gets or sets the value of variable dataDivision.
        /// </summary>
        [TestVariable("4ecef7ed-b607-4fa1-9ad8-ae6b58c19de5")]
        public string dataDivision
        {
            get { return _dataDivision; }
            set { _dataDivision = value; }
        }

        string _dataDistrict;

        /// <summary>
        /// Gets or sets the value of variable dataDistrict.
        /// </summary>
        [TestVariable("b5275eb2-cb71-44bc-9eda-44a1cf0422d9")]
        public string dataDistrict
        {
            get { return _dataDistrict; }
            set { _dataDistrict = value; }
        }

        string _direction;

        /// <summary>
        /// Gets or sets the value of variable direction.
        /// </summary>
        [TestVariable("f133e43a-74ad-4544-a011-f3a1c7c4d2e0")]
        public string direction
        {
            get { return _direction; }
            set { _direction = value; }
        }

        string _typeOfReporting;

        /// <summary>
        /// Gets or sets the value of variable typeOfReporting.
        /// </summary>
        [TestVariable("929e5182-999e-4f29-b2c3-041372f68d3a")]
        public string typeOfReporting
        {
            get { return _typeOfReporting; }
            set { _typeOfReporting = value; }
        }

        string _tranmissionType;

        /// <summary>
        /// Gets or sets the value of variable tranmissionType.
        /// </summary>
        [TestVariable("4710964f-0893-4480-a9c8-c61fa06b5a6c")]
        public string tranmissionType
        {
            get { return _tranmissionType; }
            set { _tranmissionType = value; }
        }

        string _reportingTimeZone;

        /// <summary>
        /// Gets or sets the value of variable reportingTimeZone.
        /// </summary>
        [TestVariable("4c4c5658-74f5-4448-80ef-133a1b308ca2")]
        public string reportingTimeZone
        {
            get { return _reportingTimeZone; }
            set { _reportingTimeZone = value; }
        }

        string _currentCrewDest;

        /// <summary>
        /// Gets or sets the value of variable currentCrewDest.
        /// </summary>
        [TestVariable("1af08efe-aaf5-40d2-a957-8ef483d5197d")]
        public string currentCrewDest
        {
            get { return _currentCrewDest; }
            set { _currentCrewDest = value; }
        }

        string _etaTimeZone;

        /// <summary>
        /// Gets or sets the value of variable etaTimeZone.
        /// </summary>
        [TestVariable("dfa39b36-9149-4264-b968-8cc0d150d863")]
        public string etaTimeZone
        {
            get { return _etaTimeZone; }
            set { _etaTimeZone = value; }
        }

        string _alertEventKey;

        /// <summary>
        /// Gets or sets the value of variable alertEventKey.
        /// </summary>
        [TestVariable("344f2a92-ebf1-4a84-ab48-32ffe11e6d5c")]
        public string alertEventKey
        {
            get { return _alertEventKey; }
            set { _alertEventKey = value; }
        }

        string _deviceID;

        /// <summary>
        /// Gets or sets the value of variable deviceID.
        /// </summary>
        [TestVariable("bec44873-652c-4044-bc2d-20e476423e81")]
        public string deviceID
        {
            get { return _deviceID; }
            set { _deviceID = value; }
        }

        string _ptas;

        /// <summary>
        /// Gets or sets the value of variable ptas.
        /// </summary>
        [TestVariable("fb6923ab-0625-4cc6-99c9-3fd5880c52e2")]
        public string ptas
        {
            get { return _ptas; }
            set { _ptas = value; }
        }

        string _reportingTime;

        /// <summary>
        /// Gets or sets the value of variable reportingTime.
        /// </summary>
        [TestVariable("1def02f1-e2d8-4d08-9be5-90148769cb3b")]
        public string reportingTime
        {
            get { return _reportingTime; }
            set { _reportingTime = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            STE.Code_Utils.SendMISFileCollection_NS.NS_createMovementInformation(scac, section, trainSeed, locationType, dataLocation, dataPassCount, dataTrackName, divisionNumber, dataDivision, dataDistrict, direction, typeOfReporting, tranmissionType, reportingTime, reportingTimeZone, currentCrewDest, etaTimeZone, alertEventKey, deviceID, ptas);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
