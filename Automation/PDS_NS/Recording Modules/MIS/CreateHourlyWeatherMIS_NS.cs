///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.MIS
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateHourlyWeatherMIS_NS recording.
    /// </summary>
    [TestModule("847e9eee-95d9-4cf8-8430-4ebff6226ce8", ModuleType.Recording, 1)]
    public partial class CreateHourlyWeatherMIS_NS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static CreateHourlyWeatherMIS_NS instance = new CreateHourlyWeatherMIS_NS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateHourlyWeatherMIS_NS()
        {
            operator_initials = "";
            state = "";
            division = "";
            station_id = "";
            station_name = "";
            offsetDate = "";
            offsetHours = "";
            offsetMinutes = "";
            time_zone = "";
            tempFahrenheit = "";
            dewPointFahrenheit = "";
            relativeHumidity = "";
            feelsLike = "";
            windDirectionDegrees = "";
            windSpeedMph = "";
            windSpeedGustMph = "";
            sixHourMaxTemperature = "";
            sixHourMinTemperature = "";
            hourlyPrecipitationInches = "";
            sixHourPrecipitationInches = "";
            sunshineMinutes = "";
            sunshinePercentPossible = "";
            barometricPressureInches = "";
            horizontalVisibilityMiles = "";
            weatherDescription = "";
            cloudCoverPercent = "";
            weatherCode = "";
            weatherCondition = "";
            sunriseTimeHHMM = "";
            sunsetTimeHHMM = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateHourlyWeatherMIS_NS Instance
        {
            get { return instance; }
        }

#region Variables

        string _operator_initials;

        /// <summary>
        /// Gets or sets the value of variable operator_initials.
        /// </summary>
        [TestVariable("2144bf26-016a-4a81-ab83-69ae3bed02eb")]
        public string operator_initials
        {
            get { return _operator_initials; }
            set { _operator_initials = value; }
        }

        string _state;

        /// <summary>
        /// Gets or sets the value of variable state.
        /// </summary>
        [TestVariable("a819c67c-1de0-44fe-b501-02e3857ec16d")]
        public string state
        {
            get { return _state; }
            set { _state = value; }
        }

        string _division;

        /// <summary>
        /// Gets or sets the value of variable division.
        /// </summary>
        [TestVariable("2937fbac-f6a8-4198-80dd-e95ca617ca28")]
        public string division
        {
            get { return _division; }
            set { _division = value; }
        }

        string _station_id;

        /// <summary>
        /// Gets or sets the value of variable station_id.
        /// </summary>
        [TestVariable("47a9b68a-2b84-4571-ad02-6f9ef4a5006a")]
        public string station_id
        {
            get { return _station_id; }
            set { _station_id = value; }
        }

        string _station_name;

        /// <summary>
        /// Gets or sets the value of variable station_name.
        /// </summary>
        [TestVariable("9a82bf16-2d4b-4b68-8e6e-851c1d5bedf0")]
        public string station_name
        {
            get { return _station_name; }
            set { _station_name = value; }
        }

        string _offsetDate;

        /// <summary>
        /// Gets or sets the value of variable offsetDate.
        /// </summary>
        [TestVariable("c6f405d1-40de-40b8-922d-beef0fb0aa07")]
        public string offsetDate
        {
            get { return _offsetDate; }
            set { _offsetDate = value; }
        }

        string _offsetHours;

        /// <summary>
        /// Gets or sets the value of variable offsetHours.
        /// </summary>
        [TestVariable("9984f8b2-8416-460c-a165-8f4d180a3e0f")]
        public string offsetHours
        {
            get { return _offsetHours; }
            set { _offsetHours = value; }
        }

        string _offsetMinutes;

        /// <summary>
        /// Gets or sets the value of variable offsetMinutes.
        /// </summary>
        [TestVariable("a6c70582-60e6-4355-880e-26c381616b2f")]
        public string offsetMinutes
        {
            get { return _offsetMinutes; }
            set { _offsetMinutes = value; }
        }

        string _time_zone;

        /// <summary>
        /// Gets or sets the value of variable time_zone.
        /// </summary>
        [TestVariable("d5f96532-fd87-4619-a277-07cdafc4ae3d")]
        public string time_zone
        {
            get { return _time_zone; }
            set { _time_zone = value; }
        }

        string _tempFahrenheit;

        /// <summary>
        /// Gets or sets the value of variable tempFahrenheit.
        /// </summary>
        [TestVariable("4b4ad2e1-86a7-465f-8fd0-ba1f9ff38e22")]
        public string tempFahrenheit
        {
            get { return _tempFahrenheit; }
            set { _tempFahrenheit = value; }
        }

        string _dewPointFahrenheit;

        /// <summary>
        /// Gets or sets the value of variable dewPointFahrenheit.
        /// </summary>
        [TestVariable("195ecc4c-c989-4f4e-a274-b142ad86e211")]
        public string dewPointFahrenheit
        {
            get { return _dewPointFahrenheit; }
            set { _dewPointFahrenheit = value; }
        }

        string _relativeHumidity;

        /// <summary>
        /// Gets or sets the value of variable relativeHumidity.
        /// </summary>
        [TestVariable("58f192ac-a37e-4325-9c02-fb1458238244")]
        public string relativeHumidity
        {
            get { return _relativeHumidity; }
            set { _relativeHumidity = value; }
        }

        string _feelsLike;

        /// <summary>
        /// Gets or sets the value of variable feelsLike.
        /// </summary>
        [TestVariable("6d9799d1-a721-4514-91c8-0d175d76f052")]
        public string feelsLike
        {
            get { return _feelsLike; }
            set { _feelsLike = value; }
        }

        string _windDirectionDegrees;

        /// <summary>
        /// Gets or sets the value of variable windDirectionDegrees.
        /// </summary>
        [TestVariable("67f47ec5-df6f-4f2b-a7ad-a89e145a58ec")]
        public string windDirectionDegrees
        {
            get { return _windDirectionDegrees; }
            set { _windDirectionDegrees = value; }
        }

        string _windSpeedMph;

        /// <summary>
        /// Gets or sets the value of variable windSpeedMph.
        /// </summary>
        [TestVariable("ac0484e6-3bdf-46e8-b952-f2d90b728b4c")]
        public string windSpeedMph
        {
            get { return _windSpeedMph; }
            set { _windSpeedMph = value; }
        }

        string _windSpeedGustMph;

        /// <summary>
        /// Gets or sets the value of variable windSpeedGustMph.
        /// </summary>
        [TestVariable("12c3a579-df6c-4545-9225-9c2820b95a6f")]
        public string windSpeedGustMph
        {
            get { return _windSpeedGustMph; }
            set { _windSpeedGustMph = value; }
        }

        string _sixHourMaxTemperature;

        /// <summary>
        /// Gets or sets the value of variable sixHourMaxTemperature.
        /// </summary>
        [TestVariable("30364bca-2b91-4365-9d71-21eb258d05fd")]
        public string sixHourMaxTemperature
        {
            get { return _sixHourMaxTemperature; }
            set { _sixHourMaxTemperature = value; }
        }

        string _sixHourMinTemperature;

        /// <summary>
        /// Gets or sets the value of variable sixHourMinTemperature.
        /// </summary>
        [TestVariable("126b3830-6a93-48db-ba69-4bc9be6bd1a3")]
        public string sixHourMinTemperature
        {
            get { return _sixHourMinTemperature; }
            set { _sixHourMinTemperature = value; }
        }

        string _hourlyPrecipitationInches;

        /// <summary>
        /// Gets or sets the value of variable hourlyPrecipitationInches.
        /// </summary>
        [TestVariable("441491be-e73f-451d-9a24-fa45cf1176ee")]
        public string hourlyPrecipitationInches
        {
            get { return _hourlyPrecipitationInches; }
            set { _hourlyPrecipitationInches = value; }
        }

        string _sixHourPrecipitationInches;

        /// <summary>
        /// Gets or sets the value of variable sixHourPrecipitationInches.
        /// </summary>
        [TestVariable("dfd0b309-c215-4832-b902-115c4258d260")]
        public string sixHourPrecipitationInches
        {
            get { return _sixHourPrecipitationInches; }
            set { _sixHourPrecipitationInches = value; }
        }

        string _sunshineMinutes;

        /// <summary>
        /// Gets or sets the value of variable sunshineMinutes.
        /// </summary>
        [TestVariable("3d930ad7-38cf-43fd-9a79-22ba1dfdbb01")]
        public string sunshineMinutes
        {
            get { return _sunshineMinutes; }
            set { _sunshineMinutes = value; }
        }

        string _sunshinePercentPossible;

        /// <summary>
        /// Gets or sets the value of variable sunshinePercentPossible.
        /// </summary>
        [TestVariable("1259e74a-b77d-4b35-8978-1ac8461ed311")]
        public string sunshinePercentPossible
        {
            get { return _sunshinePercentPossible; }
            set { _sunshinePercentPossible = value; }
        }

        string _barometricPressureInches;

        /// <summary>
        /// Gets or sets the value of variable barometricPressureInches.
        /// </summary>
        [TestVariable("62051416-6c6f-4840-b612-58454e4ccc49")]
        public string barometricPressureInches
        {
            get { return _barometricPressureInches; }
            set { _barometricPressureInches = value; }
        }

        string _horizontalVisibilityMiles;

        /// <summary>
        /// Gets or sets the value of variable horizontalVisibilityMiles.
        /// </summary>
        [TestVariable("4cc562ab-c963-44a2-abc7-19e6db3299d7")]
        public string horizontalVisibilityMiles
        {
            get { return _horizontalVisibilityMiles; }
            set { _horizontalVisibilityMiles = value; }
        }

        string _weatherDescription;

        /// <summary>
        /// Gets or sets the value of variable weatherDescription.
        /// </summary>
        [TestVariable("3ebe6aae-db83-43ec-9766-0feb69b61b39")]
        public string weatherDescription
        {
            get { return _weatherDescription; }
            set { _weatherDescription = value; }
        }

        string _cloudCoverPercent;

        /// <summary>
        /// Gets or sets the value of variable cloudCoverPercent.
        /// </summary>
        [TestVariable("6387ad7f-21ac-4240-b0e9-e8fcd3076ccb")]
        public string cloudCoverPercent
        {
            get { return _cloudCoverPercent; }
            set { _cloudCoverPercent = value; }
        }

        string _weatherCode;

        /// <summary>
        /// Gets or sets the value of variable weatherCode.
        /// </summary>
        [TestVariable("0f148387-4206-4d45-bbc6-b9725cb0187f")]
        public string weatherCode
        {
            get { return _weatherCode; }
            set { _weatherCode = value; }
        }

        string _weatherCondition;

        /// <summary>
        /// Gets or sets the value of variable weatherCondition.
        /// </summary>
        [TestVariable("36d3b0a1-a9fe-435e-9136-c8a30f882a80")]
        public string weatherCondition
        {
            get { return _weatherCondition; }
            set { _weatherCondition = value; }
        }

        string _sunriseTimeHHMM;

        /// <summary>
        /// Gets or sets the value of variable sunriseTimeHHMM.
        /// </summary>
        [TestVariable("6d37f519-a9ca-4a5c-99d4-920cd7f1fc9b")]
        public string sunriseTimeHHMM
        {
            get { return _sunriseTimeHHMM; }
            set { _sunriseTimeHHMM = value; }
        }

        string _sunsetTimeHHMM;

        /// <summary>
        /// Gets or sets the value of variable sunsetTimeHHMM.
        /// </summary>
        [TestVariable("afc78bbc-cd02-4b78-a09f-570c093f7bed")]
        public string sunsetTimeHHMM
        {
            get { return _sunsetTimeHHMM; }
            set { _sunsetTimeHHMM = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            STE.Code_Utils.SendMISFileCollection_NS.NS_CreateHourlyWeather(operator_initials, state, division, station_id, station_name, offsetDate, offsetHours, offsetMinutes, time_zone, tempFahrenheit, dewPointFahrenheit, relativeHumidity, feelsLike, windDirectionDegrees, windSpeedMph, windSpeedGustMph, sixHourMaxTemperature, sixHourMinTemperature, hourlyPrecipitationInches, sixHourPrecipitationInches, sunshineMinutes, sunshinePercentPossible, barometricPressureInches, horizontalVisibilityMiles, weatherDescription, cloudCoverPercent, weatherCode, weatherCondition, sunriseTimeHHMM, sunsetTimeHHMM);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
