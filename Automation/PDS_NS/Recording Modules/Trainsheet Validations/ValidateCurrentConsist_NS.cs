///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Trainsheet_Validations
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateCurrentConsist_NS recording.
    /// </summary>
    [TestModule("293f1209-7e08-4af9-b57f-4f0862873502", ModuleType.Recording, 1)]
    public partial class ValidateCurrentConsist_NS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static ValidateCurrentConsist_NS instance = new ValidateCurrentConsist_NS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateCurrentConsist_NS()
        {
            trainSeed = "";
            validateDoesExist = "True";
            numberOfLoads = "";
            numberOfEmpties = "True";
            opSta = "";
            name = "";
            tons = "";
            feet = "";
            plateSize = "";
            closeTrainsheet = "False";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateCurrentConsist_NS Instance
        {
            get { return instance; }
        }

#region Variables

        string _trainSeed;

        /// <summary>
        /// Gets or sets the value of variable trainSeed.
        /// </summary>
        [TestVariable("3fd1427d-90ef-4df9-9bf7-f4260843e898")]
        public string trainSeed
        {
            get { return _trainSeed; }
            set { _trainSeed = value; }
        }

        string _validateDoesExist;

        /// <summary>
        /// Gets or sets the value of variable validateDoesExist.
        /// </summary>
        [TestVariable("b3f56431-c0a0-45b4-b0d6-63da4a450411")]
        public string validateDoesExist
        {
            get { return _validateDoesExist; }
            set { _validateDoesExist = value; }
        }

        string _numberOfLoads;

        /// <summary>
        /// Gets or sets the value of variable numberOfLoads.
        /// </summary>
        [TestVariable("5d6680b0-a5e0-4d91-b09b-1a854c7564d7")]
        public string numberOfLoads
        {
            get { return _numberOfLoads; }
            set { _numberOfLoads = value; }
        }

        string _numberOfEmpties;

        /// <summary>
        /// Gets or sets the value of variable numberOfEmpties.
        /// </summary>
        [TestVariable("4fa3a8d0-a2fc-4ce7-a739-3b00039ec309")]
        public string numberOfEmpties
        {
            get { return _numberOfEmpties; }
            set { _numberOfEmpties = value; }
        }

        string _opSta;

        /// <summary>
        /// Gets or sets the value of variable opSta.
        /// </summary>
        [TestVariable("42dc63d8-8ac3-4a08-8d0a-9a69b6042db2")]
        public string opSta
        {
            get { return _opSta; }
            set { _opSta = value; }
        }

        string _name;

        /// <summary>
        /// Gets or sets the value of variable name.
        /// </summary>
        [TestVariable("e8721d89-618b-4904-b9d8-99c42d87f03e")]
        public string name
        {
            get { return _name; }
            set { _name = value; }
        }

        string _tons;

        /// <summary>
        /// Gets or sets the value of variable tons.
        /// </summary>
        [TestVariable("f4e4dea0-f8bd-4b5e-975b-518d84a4ee83")]
        public string tons
        {
            get { return _tons; }
            set { _tons = value; }
        }

        string _feet;

        /// <summary>
        /// Gets or sets the value of variable feet.
        /// </summary>
        [TestVariable("416d5d61-d7a2-4732-8ef1-551486d2e265")]
        public string feet
        {
            get { return _feet; }
            set { _feet = value; }
        }

        string _plateSize;

        /// <summary>
        /// Gets or sets the value of variable plateSize.
        /// </summary>
        [TestVariable("e51d363d-5c5c-4b60-bb5e-bea37de778cc")]
        public string plateSize
        {
            get { return _plateSize; }
            set { _plateSize = value; }
        }

        string _closeTrainsheet;

        /// <summary>
        /// Gets or sets the value of variable closeTrainsheet.
        /// </summary>
        [TestVariable("4be0b04c-88b9-4705-8135-91244c88d720")]
        public string closeTrainsheet
        {
            get { return _closeTrainsheet; }
            set { _closeTrainsheet = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Trainsheet.NS_ValidateCurrentConsistRecord_TrainSheet(trainSeed, numberOfLoads, numberOfEmpties, opSta, name, tons, feet, plateSize, ValueConverter.ArgumentFromString<bool>("closeTrainSheet", closeTrainsheet), ValueConverter.ArgumentFromString<bool>("validateDoesExist", validateDoesExist));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
