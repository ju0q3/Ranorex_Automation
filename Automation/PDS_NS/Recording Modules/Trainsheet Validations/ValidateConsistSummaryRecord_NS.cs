///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Trainsheet_Validations
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateConsistSummaryRecord_NS recording.
    /// </summary>
    [TestModule("6bffcbe7-8d91-48c7-ad40-fd3ee7f8bada", ModuleType.Recording, 1)]
    public partial class ValidateConsistSummaryRecord_NS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static ValidateConsistSummaryRecord_NS instance = new ValidateConsistSummaryRecord_NS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateConsistSummaryRecord_NS()
        {
            trainSeed = "";
            closeTrainsheet = "False";
            validateDoesExist = "True";
            opSta = "";
            name = "";
            tons = "";
            length = "";
            loads = "";
            empties = "";
            passCount = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateConsistSummaryRecord_NS Instance
        {
            get { return instance; }
        }

#region Variables

        string _trainSeed;

        /// <summary>
        /// Gets or sets the value of variable trainSeed.
        /// </summary>
        [TestVariable("6a69a8cc-1abb-462d-b837-e714aa8d8483")]
        public string trainSeed
        {
            get { return _trainSeed; }
            set { _trainSeed = value; }
        }

        string _closeTrainsheet;

        /// <summary>
        /// Gets or sets the value of variable closeTrainsheet.
        /// </summary>
        [TestVariable("c592e4a0-6328-4a1f-9ff1-f6b133b9ba0f")]
        public string closeTrainsheet
        {
            get { return _closeTrainsheet; }
            set { _closeTrainsheet = value; }
        }

        string _validateDoesExist;

        /// <summary>
        /// Gets or sets the value of variable validateDoesExist.
        /// </summary>
        [TestVariable("2d9f8679-199a-489e-a87d-df934fda2d36")]
        public string validateDoesExist
        {
            get { return _validateDoesExist; }
            set { _validateDoesExist = value; }
        }

        string _opSta;

        /// <summary>
        /// Gets or sets the value of variable opSta.
        /// </summary>
        [TestVariable("c8296012-45bb-40be-9831-a1fc46f3781f")]
        public string opSta
        {
            get { return _opSta; }
            set { _opSta = value; }
        }

        string _name;

        /// <summary>
        /// Gets or sets the value of variable name.
        /// </summary>
        [TestVariable("36f02ed2-85f8-4263-892c-8c08bc933443")]
        public string name
        {
            get { return _name; }
            set { _name = value; }
        }

        string _tons;

        /// <summary>
        /// Gets or sets the value of variable tons.
        /// </summary>
        [TestVariable("645ea4a4-24b4-4129-8b60-33cacf697833")]
        public string tons
        {
            get { return _tons; }
            set { _tons = value; }
        }

        string _length;

        /// <summary>
        /// Gets or sets the value of variable length.
        /// </summary>
        [TestVariable("44a113da-bee6-4f2d-9eb2-1a4c5753007b")]
        public string length
        {
            get { return _length; }
            set { _length = value; }
        }

        string _loads;

        /// <summary>
        /// Gets or sets the value of variable loads.
        /// </summary>
        [TestVariable("97653ce3-0066-436e-b9f5-7b9123ac16bf")]
        public string loads
        {
            get { return _loads; }
            set { _loads = value; }
        }

        string _empties;

        /// <summary>
        /// Gets or sets the value of variable empties.
        /// </summary>
        [TestVariable("5a894f31-54f3-47d3-846d-27a6e7d576a5")]
        public string empties
        {
            get { return _empties; }
            set { _empties = value; }
        }

        string _passCount;

        /// <summary>
        /// Gets or sets the value of variable passCount.
        /// </summary>
        [TestVariable("e4daaffa-d44a-4484-ba09-917d62923891")]
        public string passCount
        {
            get { return _passCount; }
            set { _passCount = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Trainsheet.NS_ValidateConsistSummaryRecord_TrainSheet(trainSeed, opSta, name, tons, length, loads, empties, passCount, ValueConverter.ArgumentFromString<bool>("closeTrainSheet", closeTrainsheet), ValueConverter.ArgumentFromString<bool>("validateDoesExist", validateDoesExist), ValueConverter.ArgumentFromString<int>("iteration", "0"));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
