///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Task_List
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CleanUpAllPotentialSuggestions recording.
    /// </summary>
    [TestModule("68eda991-0d32-47b7-b0fb-134977bcfd9a", ModuleType.Recording, 1)]
    public partial class CleanUpAllPotentialSuggestions : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static CleanUpAllPotentialSuggestions instance = new CleanUpAllPotentialSuggestions();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CleanUpAllPotentialSuggestions()
        {
            replacementFromLimit = "";
            replacementToLimit = "";
            replacementTrack = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CleanUpAllPotentialSuggestions Instance
        {
            get { return instance; }
        }

#region Variables

        string _replacementFromLimit;

        /// <summary>
        /// Gets or sets the value of variable replacementFromLimit.
        /// </summary>
        [TestVariable("7c2cf06f-4459-4275-9a96-e99d13f7ce6b")]
        public string replacementFromLimit
        {
            get { return _replacementFromLimit; }
            set { _replacementFromLimit = value; }
        }

        string _replacementToLimit;

        /// <summary>
        /// Gets or sets the value of variable replacementToLimit.
        /// </summary>
        [TestVariable("fddb43dc-4241-46d0-bb9c-3943e25db619")]
        public string replacementToLimit
        {
            get { return _replacementToLimit; }
            set { _replacementToLimit = value; }
        }

        string _replacementTrack;

        /// <summary>
        /// Gets or sets the value of variable replacementTrack.
        /// </summary>
        [TestVariable("cf0d9564-e0be-4890-82aa-da15bb4ec36e")]
        public string replacementTrack
        {
            get { return _replacementTrack; }
            set { _replacementTrack = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                UserCodeCollections.NS_Miscellaneous.IssueAndVoidALLPotentialTACSuggestions(replacementFromLimit, replacementToLimit, replacementTrack);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
