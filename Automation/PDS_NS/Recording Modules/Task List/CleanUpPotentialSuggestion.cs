///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Task_List
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CleanUpPotentialSuggestion recording.
    /// </summary>
    [TestModule("a0bd5c77-2234-4ab0-b629-28db6eeb65bc", ModuleType.Recording, 1)]
    public partial class CleanUpPotentialSuggestion : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static CleanUpPotentialSuggestion instance = new CleanUpPotentialSuggestion();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CleanUpPotentialSuggestion()
        {
            trainSeed = "";
            fromLimit = "";
            toLimit = "";
            track = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CleanUpPotentialSuggestion Instance
        {
            get { return instance; }
        }

#region Variables

        string _trainSeed;

        /// <summary>
        /// Gets or sets the value of variable trainSeed.
        /// </summary>
        [TestVariable("fb948665-9935-467d-a627-ad84c02b346a")]
        public string trainSeed
        {
            get { return _trainSeed; }
            set { _trainSeed = value; }
        }

        string _fromLimit;

        /// <summary>
        /// Gets or sets the value of variable fromLimit.
        /// </summary>
        [TestVariable("a8b77565-b5cc-4816-8c4c-3e526715e3d8")]
        public string fromLimit
        {
            get { return _fromLimit; }
            set { _fromLimit = value; }
        }

        string _toLimit;

        /// <summary>
        /// Gets or sets the value of variable toLimit.
        /// </summary>
        [TestVariable("2916d9d6-9774-4d8d-82e6-2eaad7ec6039")]
        public string toLimit
        {
            get { return _toLimit; }
            set { _toLimit = value; }
        }

        string _track;

        /// <summary>
        /// Gets or sets the value of variable track.
        /// </summary>
        [TestVariable("1a6a7492-7068-41c4-a24f-7d7cc22ad988")]
        public string track
        {
            get { return _track; }
            set { _track = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                UserCodeCollections.NS_Miscellaneous.IssueAndVoidPotentialTACSuggestion(trainSeed, fromLimit, toLimit, track);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
