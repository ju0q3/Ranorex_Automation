///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Track_Authorities
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NS_VoidAuthorityWithAllFlows recording.
    /// </summary>
    [TestModule("c570c7a0-c7b7-49c2-89c4-2de6580a6c0c", ModuleType.Recording, 1)]
    public partial class NS_VoidAuthorityWithAllFlows : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static NS_VoidAuthorityWithAllFlows instance = new NS_VoidAuthorityWithAllFlows();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NS_VoidAuthorityWithAllFlows()
        {
            authoritySeed = "";
            openAuthorityFrom = "";
            jointOccupantsValue = "";
            extendTime = "";
            clearByPerson = "";
            expectedFeedback = "";
            updateBtn = "false";
            clearBtn = "false";
            closeBtn = "false";
            cancelBtn = "false";
            expNotificationsPopupHeader = "";
            expNotificationsPopupText = "";
            notificationPopupValue = "";
            expRNCPopupHeader = "";
            expRNCPopupText = "";
            releaserNotCopierPopupValue = "";
            issueAuthorityPTCVoice = "false";
            completeAcknowledge = "false";
            closeForms = "false";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NS_VoidAuthorityWithAllFlows Instance
        {
            get { return instance; }
        }

#region Variables

        string _authoritySeed;

        /// <summary>
        /// Gets or sets the value of variable authoritySeed.
        /// </summary>
        [TestVariable("16f0f2f9-8689-465e-abf6-0d5b00ddd97e")]
        public string authoritySeed
        {
            get { return _authoritySeed; }
            set { _authoritySeed = value; }
        }

        string _openAuthorityFrom;

        /// <summary>
        /// Gets or sets the value of variable openAuthorityFrom.
        /// </summary>
        [TestVariable("292fbbd5-b74c-4f40-9b33-0aef62b3a4d8")]
        public string openAuthorityFrom
        {
            get { return _openAuthorityFrom; }
            set { _openAuthorityFrom = value; }
        }

        string _jointOccupantsValue;

        /// <summary>
        /// Gets or sets the value of variable jointOccupantsValue.
        /// </summary>
        [TestVariable("2db66818-ce54-4582-8642-13bebb62918b")]
        public string jointOccupantsValue
        {
            get { return _jointOccupantsValue; }
            set { _jointOccupantsValue = value; }
        }

        string _extendTime;

        /// <summary>
        /// Gets or sets the value of variable extendTime.
        /// </summary>
        [TestVariable("3236362a-717b-472b-9efd-777c3108316d")]
        public string extendTime
        {
            get { return _extendTime; }
            set { _extendTime = value; }
        }

        string _clearByPerson;

        /// <summary>
        /// Gets or sets the value of variable clearByPerson.
        /// </summary>
        [TestVariable("9ff912d8-0cb5-49d0-84a0-c7c7635db0cb")]
        public string clearByPerson
        {
            get { return _clearByPerson; }
            set { _clearByPerson = value; }
        }

        string _expectedFeedback;

        /// <summary>
        /// Gets or sets the value of variable expectedFeedback.
        /// </summary>
        [TestVariable("a44f5ce2-bf68-43df-a78b-94dd9068a99a")]
        public string expectedFeedback
        {
            get { return _expectedFeedback; }
            set { _expectedFeedback = value; }
        }

        string _updateBtn;

        /// <summary>
        /// Gets or sets the value of variable updateBtn.
        /// </summary>
        [TestVariable("f5af82f9-be31-43f8-99ce-a9503dcd1e5c")]
        public string updateBtn
        {
            get { return _updateBtn; }
            set { _updateBtn = value; }
        }

        string _clearBtn;

        /// <summary>
        /// Gets or sets the value of variable clearBtn.
        /// </summary>
        [TestVariable("5782d804-f4fe-4dfd-87d3-120a134184d3")]
        public string clearBtn
        {
            get { return _clearBtn; }
            set { _clearBtn = value; }
        }

        string _closeBtn;

        /// <summary>
        /// Gets or sets the value of variable closeBtn.
        /// </summary>
        [TestVariable("77e63c48-952e-4415-9407-98cf5170a733")]
        public string closeBtn
        {
            get { return _closeBtn; }
            set { _closeBtn = value; }
        }

        string _cancelBtn;

        /// <summary>
        /// Gets or sets the value of variable cancelBtn.
        /// </summary>
        [TestVariable("adb950c3-b764-411e-b472-f31e0ee46730")]
        public string cancelBtn
        {
            get { return _cancelBtn; }
            set { _cancelBtn = value; }
        }

        string _expNotificationsPopupHeader;

        /// <summary>
        /// Gets or sets the value of variable expNotificationsPopupHeader.
        /// </summary>
        [TestVariable("756daf98-2fb4-402e-bbfd-21124685e300")]
        public string expNotificationsPopupHeader
        {
            get { return _expNotificationsPopupHeader; }
            set { _expNotificationsPopupHeader = value; }
        }

        string _expNotificationsPopupText;

        /// <summary>
        /// Gets or sets the value of variable expNotificationsPopupText.
        /// </summary>
        [TestVariable("1896cc5b-80fe-415b-ba1b-934db2f4564a")]
        public string expNotificationsPopupText
        {
            get { return _expNotificationsPopupText; }
            set { _expNotificationsPopupText = value; }
        }

        string _notificationPopupValue;

        /// <summary>
        /// Gets or sets the value of variable notificationPopupValue.
        /// </summary>
        [TestVariable("5572fe8f-6e96-4dad-be06-ab9b3b0cdf1b")]
        public string notificationPopupValue
        {
            get { return _notificationPopupValue; }
            set { _notificationPopupValue = value; }
        }

        string _expRNCPopupHeader;

        /// <summary>
        /// Gets or sets the value of variable expRNCPopupHeader.
        /// </summary>
        [TestVariable("76d04489-f8d3-4afa-9305-e36821e2cd94")]
        public string expRNCPopupHeader
        {
            get { return _expRNCPopupHeader; }
            set { _expRNCPopupHeader = value; }
        }

        string _expRNCPopupText;

        /// <summary>
        /// Gets or sets the value of variable expRNCPopupText.
        /// </summary>
        [TestVariable("f3804dce-c243-4e6c-90c0-7240d59de8b4")]
        public string expRNCPopupText
        {
            get { return _expRNCPopupText; }
            set { _expRNCPopupText = value; }
        }

        string _releaserNotCopierPopupValue;

        /// <summary>
        /// Gets or sets the value of variable releaserNotCopierPopupValue.
        /// </summary>
        [TestVariable("69f68736-4b9b-4cbe-b72c-9d6a78fc6bac")]
        public string releaserNotCopierPopupValue
        {
            get { return _releaserNotCopierPopupValue; }
            set { _releaserNotCopierPopupValue = value; }
        }

        string _issueAuthorityPTCVoice;

        /// <summary>
        /// Gets or sets the value of variable issueAuthorityPTCVoice.
        /// </summary>
        [TestVariable("8fbeb22c-9b10-4892-a5db-37ec53cacf21")]
        public string issueAuthorityPTCVoice
        {
            get { return _issueAuthorityPTCVoice; }
            set { _issueAuthorityPTCVoice = value; }
        }

        string _completeAcknowledge;

        /// <summary>
        /// Gets or sets the value of variable completeAcknowledge.
        /// </summary>
        [TestVariable("1446f06c-9864-4a20-a5b5-494d54aa457c")]
        public string completeAcknowledge
        {
            get { return _completeAcknowledge; }
            set { _completeAcknowledge = value; }
        }

        string _closeForms;

        /// <summary>
        /// Gets or sets the value of variable closeForms.
        /// </summary>
        [TestVariable("85ac1fe2-d477-4429-863e-817eba9c058b")]
        public string closeForms
        {
            get { return _closeForms; }
            set { _closeForms = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Authorities.VoidAuthorityWithAllFlows(authoritySeed, openAuthorityFrom, jointOccupantsValue, extendTime, clearByPerson, expectedFeedback, ValueConverter.ArgumentFromString<bool>("updateBtn", updateBtn), ValueConverter.ArgumentFromString<bool>("clearBtn", clearBtn), ValueConverter.ArgumentFromString<bool>("closeBtn", closeBtn), ValueConverter.ArgumentFromString<bool>("cancelBtn", cancelBtn), expNotificationsPopupHeader, expNotificationsPopupText, notificationPopupValue, expRNCPopupHeader, expRNCPopupText, releaserNotCopierPopupValue, ValueConverter.ArgumentFromString<bool>("issueAuthorityPTCVoice", issueAuthorityPTCVoice), ValueConverter.ArgumentFromString<bool>("completeAcknowledge", completeAcknowledge), ValueConverter.ArgumentFromString<bool>("closeForms", closeForms));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
