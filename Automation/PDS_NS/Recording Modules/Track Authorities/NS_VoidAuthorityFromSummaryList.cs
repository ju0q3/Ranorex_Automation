///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Track_Authorities
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NS_VoidAuthorityFromSummaryList recording.
    /// </summary>
    [TestModule("31fe3d23-2575-4b6c-9977-6839ef8d5042", ModuleType.Recording, 1)]
    public partial class NS_VoidAuthorityFromSummaryList : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static NS_VoidAuthorityFromSummaryList instance = new NS_VoidAuthorityFromSummaryList();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NS_VoidAuthorityFromSummaryList()
        {
            authoritySeed = "";
            jointOccupantsValue = "";
            extendTime = "";
            clearByPerson = "";
            expectedFeedback = "";
            updateBtn = "false";
            clearBtn = "false";
            closeBtn = "false";
            cancelBtn = "false";
            expNotificationsPopupHeader = "";
            expNotificationsPopupText = "";
            notificationPopupValue = "";
            expRNCPopupHeader = "";
            expRNCPopupText = "";
            releaserNotCopierPopupValue = "";
            issueAuthorityPTCVoice = "false";
            completeAcknowledge = "false";
            closeForms = "false";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NS_VoidAuthorityFromSummaryList Instance
        {
            get { return instance; }
        }

#region Variables

        string _authoritySeed;

        /// <summary>
        /// Gets or sets the value of variable authoritySeed.
        /// </summary>
        [TestVariable("8ac13fc8-e17d-4607-9d56-e9dc99bb11d2")]
        public string authoritySeed
        {
            get { return _authoritySeed; }
            set { _authoritySeed = value; }
        }

        string _jointOccupantsValue;

        /// <summary>
        /// Gets or sets the value of variable jointOccupantsValue.
        /// </summary>
        [TestVariable("a2f73cfa-b529-4acb-8b43-a295740ed3c1")]
        public string jointOccupantsValue
        {
            get { return _jointOccupantsValue; }
            set { _jointOccupantsValue = value; }
        }

        string _extendTime;

        /// <summary>
        /// Gets or sets the value of variable extendTime.
        /// </summary>
        [TestVariable("d9eaf549-4533-42ba-afd1-335d0c947d8a")]
        public string extendTime
        {
            get { return _extendTime; }
            set { _extendTime = value; }
        }

        string _clearByPerson;

        /// <summary>
        /// Gets or sets the value of variable clearByPerson.
        /// </summary>
        [TestVariable("f16acd35-7d80-4ef1-bdfd-15548b346324")]
        public string clearByPerson
        {
            get { return _clearByPerson; }
            set { _clearByPerson = value; }
        }

        string _expectedFeedback;

        /// <summary>
        /// Gets or sets the value of variable expectedFeedback.
        /// </summary>
        [TestVariable("8e7848bd-8116-4dd1-9963-c56431adce1d")]
        public string expectedFeedback
        {
            get { return _expectedFeedback; }
            set { _expectedFeedback = value; }
        }

        string _updateBtn;

        /// <summary>
        /// Gets or sets the value of variable updateBtn.
        /// </summary>
        [TestVariable("36192a9d-96e4-4cf6-8a06-d4b0d3d269f5")]
        public string updateBtn
        {
            get { return _updateBtn; }
            set { _updateBtn = value; }
        }

        string _clearBtn;

        /// <summary>
        /// Gets or sets the value of variable clearBtn.
        /// </summary>
        [TestVariable("9f6fc25b-9cd9-4a43-a013-432e0eec48d0")]
        public string clearBtn
        {
            get { return _clearBtn; }
            set { _clearBtn = value; }
        }

        string _closeBtn;

        /// <summary>
        /// Gets or sets the value of variable closeBtn.
        /// </summary>
        [TestVariable("9cfc4fc9-9a5e-41cb-b9d1-9ed97df98a11")]
        public string closeBtn
        {
            get { return _closeBtn; }
            set { _closeBtn = value; }
        }

        string _cancelBtn;

        /// <summary>
        /// Gets or sets the value of variable cancelBtn.
        /// </summary>
        [TestVariable("7ca0982d-e071-454e-bde9-9bc440f1cf49")]
        public string cancelBtn
        {
            get { return _cancelBtn; }
            set { _cancelBtn = value; }
        }

        string _expNotificationsPopupHeader;

        /// <summary>
        /// Gets or sets the value of variable expNotificationsPopupHeader.
        /// </summary>
        [TestVariable("605cded9-0344-4288-a487-6994f9aa2021")]
        public string expNotificationsPopupHeader
        {
            get { return _expNotificationsPopupHeader; }
            set { _expNotificationsPopupHeader = value; }
        }

        string _expNotificationsPopupText;

        /// <summary>
        /// Gets or sets the value of variable expNotificationsPopupText.
        /// </summary>
        [TestVariable("7ac0fca7-6681-4dd5-aed2-84ffdd73e149")]
        public string expNotificationsPopupText
        {
            get { return _expNotificationsPopupText; }
            set { _expNotificationsPopupText = value; }
        }

        string _notificationPopupValue;

        /// <summary>
        /// Gets or sets the value of variable notificationPopupValue.
        /// </summary>
        [TestVariable("915c071b-d9a9-4cb2-9dd4-84f0d0b6f954")]
        public string notificationPopupValue
        {
            get { return _notificationPopupValue; }
            set { _notificationPopupValue = value; }
        }

        string _expRNCPopupHeader;

        /// <summary>
        /// Gets or sets the value of variable expRNCPopupHeader.
        /// </summary>
        [TestVariable("586ae5a3-348e-429d-84b6-314b0c8acfa9")]
        public string expRNCPopupHeader
        {
            get { return _expRNCPopupHeader; }
            set { _expRNCPopupHeader = value; }
        }

        string _expRNCPopupText;

        /// <summary>
        /// Gets or sets the value of variable expRNCPopupText.
        /// </summary>
        [TestVariable("c1f6dde2-0955-4fb4-abdc-b36a9f1f9d93")]
        public string expRNCPopupText
        {
            get { return _expRNCPopupText; }
            set { _expRNCPopupText = value; }
        }

        string _releaserNotCopierPopupValue;

        /// <summary>
        /// Gets or sets the value of variable releaserNotCopierPopupValue.
        /// </summary>
        [TestVariable("8fddb76a-53e1-475d-8a03-37bd2239aa3e")]
        public string releaserNotCopierPopupValue
        {
            get { return _releaserNotCopierPopupValue; }
            set { _releaserNotCopierPopupValue = value; }
        }

        string _issueAuthorityPTCVoice;

        /// <summary>
        /// Gets or sets the value of variable issueAuthorityPTCVoice.
        /// </summary>
        [TestVariable("62b2e3ce-dcde-4a69-a499-80c2eae9c664")]
        public string issueAuthorityPTCVoice
        {
            get { return _issueAuthorityPTCVoice; }
            set { _issueAuthorityPTCVoice = value; }
        }

        string _completeAcknowledge;

        /// <summary>
        /// Gets or sets the value of variable completeAcknowledge.
        /// </summary>
        [TestVariable("60f946b2-33c3-418a-aec9-b6d89b6731b6")]
        public string completeAcknowledge
        {
            get { return _completeAcknowledge; }
            set { _completeAcknowledge = value; }
        }

        string _closeForms;

        /// <summary>
        /// Gets or sets the value of variable closeForms.
        /// </summary>
        [TestVariable("25593740-1fcd-4645-967f-714a845898bb")]
        public string closeForms
        {
            get { return _closeForms; }
            set { _closeForms = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Authorities.VoidAuthorityWithAllFlows(authoritySeed, "SummaryList", jointOccupantsValue, extendTime, clearByPerson, expectedFeedback, ValueConverter.ArgumentFromString<bool>("updateBtn", updateBtn), ValueConverter.ArgumentFromString<bool>("clearBtn", clearBtn), ValueConverter.ArgumentFromString<bool>("closeBtn", closeBtn), ValueConverter.ArgumentFromString<bool>("cancelBtn", cancelBtn), expNotificationsPopupHeader, expNotificationsPopupText, notificationPopupValue, expRNCPopupHeader, expRNCPopupText, releaserNotCopierPopupValue, ValueConverter.ArgumentFromString<bool>("issueAuthorityPTCVoice", issueAuthorityPTCVoice), ValueConverter.ArgumentFromString<bool>("completeAcknowledge", completeAcknowledge), ValueConverter.ArgumentFromString<bool>("closeForms", closeForms));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
