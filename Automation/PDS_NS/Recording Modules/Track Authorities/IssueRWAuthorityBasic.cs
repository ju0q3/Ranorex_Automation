///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Track_Authorities
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The IssueRWAuthorityBasic recording.
    /// </summary>
    [TestModule("212f3bc9-b21d-4569-8bf8-fd1d1f6d5a8f", ModuleType.Recording, 1)]
    public partial class IssueRWAuthorityBasic : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.TrackAuthorities_Repo repository.
        /// </summary>
        public static global::PDS_NS.TrackAuthorities_Repo repo = global::PDS_NS.TrackAuthorities_Repo.Instance;

        static IssueRWAuthorityBasic instance = new IssueRWAuthorityBasic();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public IssueRWAuthorityBasic()
        {
            to_person = "Mathew";
            at_station = "Smithville";
            between_station = "Smithville";
            between_and_station = "Arles";
            track_one = "MAIN";
            effective_until_time = "09:00 AM";
            copiedby_person = "Jhon1";
            relaying_employee = "Jhon1";
            relaying_at_station = "Smithville";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static IssueRWAuthorityBasic Instance
        {
            get { return instance; }
        }

#region Variables

        string _to_person;

        /// <summary>
        /// Gets or sets the value of variable to_person.
        /// </summary>
        [TestVariable("bc371b72-871d-48a3-8093-9dee55dbf892")]
        public string to_person
        {
            get { return _to_person; }
            set { _to_person = value; }
        }

        string _at_station;

        /// <summary>
        /// Gets or sets the value of variable at_station.
        /// </summary>
        [TestVariable("abc922de-0ce3-4b2b-a08d-59d90b313ab3")]
        public string at_station
        {
            get { return _at_station; }
            set { _at_station = value; }
        }

        string _between_station;

        /// <summary>
        /// Gets or sets the value of variable between_station.
        /// </summary>
        [TestVariable("aa9ad26a-1775-4f61-ab87-be631cbd6a39")]
        public string between_station
        {
            get { return _between_station; }
            set { _between_station = value; }
        }

        string _between_and_station;

        /// <summary>
        /// Gets or sets the value of variable between_and_station.
        /// </summary>
        [TestVariable("b2849cb5-a5a1-428c-94bb-b3c624f446d5")]
        public string between_and_station
        {
            get { return _between_and_station; }
            set { _between_and_station = value; }
        }

        string _track_one;

        /// <summary>
        /// Gets or sets the value of variable track_one.
        /// </summary>
        [TestVariable("b914f064-7580-4e85-a233-ffed98062060")]
        public string track_one
        {
            get { return _track_one; }
            set { _track_one = value; }
        }

        string _effective_until_time;

        /// <summary>
        /// Gets or sets the value of variable effective_until_time.
        /// </summary>
        [TestVariable("b4bf644b-1e19-4a40-b3e1-ff09bd1702d6")]
        public string effective_until_time
        {
            get { return _effective_until_time; }
            set { _effective_until_time = value; }
        }

        string _copiedby_person;

        /// <summary>
        /// Gets or sets the value of variable copiedby_person.
        /// </summary>
        [TestVariable("64ed6098-716a-40a3-890b-6c269f4607b7")]
        public string copiedby_person
        {
            get { return _copiedby_person; }
            set { _copiedby_person = value; }
        }

        string _relaying_employee;

        /// <summary>
        /// Gets or sets the value of variable relaying_employee.
        /// </summary>
        [TestVariable("968e0d9e-283b-43d5-b996-cb773e63eea5")]
        public string relaying_employee
        {
            get { return _relaying_employee; }
            set { _relaying_employee = value; }
        }

        string _relaying_at_station;

        /// <summary>
        /// Gets or sets the value of variable relaying_at_station.
        /// </summary>
        [TestVariable("d7e7b4b8-beae-4e1f-b18c-a6c0294d1740")]
        public string relaying_at_station
        {
            get { return _relaying_at_station; }
            set { _relaying_at_station = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Authorities.NS_OpenRWTrackAuthorityForm_MainMenu();
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.To.NonEngineToTextInfo, repo.Create_Track_Authority.At.AtTextInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$to_person' on item 'Create_Track_Authority.To.NonEngineToText'.", repo.Create_Track_Authority.To.NonEngineToTextInfo, new RecordItemIndex(2));
            repo.Create_Track_Authority.To.NonEngineToText.Element.SetAttributeValue("Text", to_person);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(3));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.At.AtTextInfo, repo.Create_Track_Authority.Box3.WorkBetweenBetweenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$at_station' on item 'Create_Track_Authority.At.AtText'.", repo.Create_Track_Authority.At.AtTextInfo, new RecordItemIndex(5));
            repo.Create_Track_Authority.At.AtText.Element.SetAttributeValue("Text", at_station);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(6));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box3.WorkBetweenBetweenInfo, repo.Create_Track_Authority.Box3.WorkBetweenAndInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$between_station' on item 'Create_Track_Authority.Box3.WorkBetweenBetween'.", repo.Create_Track_Authority.Box3.WorkBetweenBetweenInfo, new RecordItemIndex(8));
            repo.Create_Track_Authority.Box3.WorkBetweenBetween.Element.SetAttributeValue("Text", between_station);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(9));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box3.WorkBetweenAndInfo, repo.Create_Track_Authority.Box3.WorkBetweenTrack1Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$between_and_station' on item 'Create_Track_Authority.Box3.WorkBetweenAnd'.", repo.Create_Track_Authority.Box3.WorkBetweenAndInfo, new RecordItemIndex(11));
            repo.Create_Track_Authority.Box3.WorkBetweenAnd.Element.SetAttributeValue("Text", between_and_station);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(12));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box3.WorkBetweenTrack1Info, repo.Create_Track_Authority.Box5.EffectiveUntilTextInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$track_one' on item 'Create_Track_Authority.Box3.WorkBetweenTrack1'.", repo.Create_Track_Authority.Box3.WorkBetweenTrack1Info, new RecordItemIndex(14));
            repo.Create_Track_Authority.Box3.WorkBetweenTrack1.Element.SetAttributeValue("Text", track_one);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(15));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box5.EffectiveUntilTextInfo, repo.Create_Track_Authority.IssueButtonInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$effective_until_time' on item 'Create_Track_Authority.Box5.EffectiveUntilText'.", repo.Create_Track_Authority.Box5.EffectiveUntilTextInfo, new RecordItemIndex(17));
            repo.Create_Track_Authority.Box5.EffectiveUntilText.Element.SetAttributeValue("Text", effective_until_time);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(18));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.IssueButtonInfo, repo.Communications_Exchange_Ok_Authority.ContinueButtonInfo);
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.ClickAndWaitForNotExistWithRetry(repo.Communications_Exchange_Ok_Authority.CopiedByTextInfo, repo.Communications_Exchange_Ok_Authority.RelayingEmployeeTextInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$copiedby_person' on item 'Communications_Exchange_Ok_Authority.CopiedByText'.", repo.Communications_Exchange_Ok_Authority.CopiedByTextInfo, new RecordItemIndex(21));
            repo.Communications_Exchange_Ok_Authority.CopiedByText.Element.SetAttributeValue("Text", copiedby_person);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(22));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.ClickAndWaitForNotExistWithRetry(repo.Communications_Exchange_Ok_Authority.RelayingEmployeeTextInfo, repo.Communications_Exchange_Ok_Authority.RelayingAtTextInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$relaying_employee' on item 'Communications_Exchange_Ok_Authority.RelayingEmployeeText'.", repo.Communications_Exchange_Ok_Authority.RelayingEmployeeTextInfo, new RecordItemIndex(24));
            repo.Communications_Exchange_Ok_Authority.RelayingEmployeeText.Element.SetAttributeValue("Text", relaying_employee);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(25));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.ClickAndWaitForNotExistWithRetry(repo.Communications_Exchange_Ok_Authority.RelayingAtTextInfo, repo.Communications_Exchange_Ok_Authority.ContinueButtonInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$relaying_at_station' on item 'Communications_Exchange_Ok_Authority.RelayingAtText'.", repo.Communications_Exchange_Ok_Authority.RelayingAtTextInfo, new RecordItemIndex(27));
            repo.Communications_Exchange_Ok_Authority.RelayingAtText.Element.SetAttributeValue("Text", relaying_at_station);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(28));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(29));
            Delay.Duration(500, false);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Communications_Exchange_Ok_Authority.ContinueButtonInfo, repo.Communications_Exchange_Ok_Authority.AcknowledgeButtonInfo);
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.ClickAndWaitForNotExistWithRetry(repo.Communications_Exchange_Ok_Authority.AcknowledgeButtonInfo, repo.Communications_Exchange_Ok_Authority.AcknowledgeButtonInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
