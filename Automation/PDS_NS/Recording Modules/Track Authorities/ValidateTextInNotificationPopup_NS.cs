///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Track_Authorities
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateTextInNotificationPopup_NS recording.
    /// </summary>
    [TestModule("dc995524-0027-4add-9de9-3c330fa932d4", ModuleType.Recording, 1)]
    public partial class ValidateTextInNotificationPopup_NS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static ValidateTextInNotificationPopup_NS instance = new ValidateTextInNotificationPopup_NS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateTextInNotificationPopup_NS()
        {
            expNotificationPopupHeader = "Notifications";
            expNotificationPopupText = "Selection of a zone\\(s\\) may only partially block the selected interlocking and other zone routes may be available.";
            res = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateTextInNotificationPopup_NS Instance
        {
            get { return instance; }
        }

#region Variables

        string _expNotificationPopupHeader;

        /// <summary>
        /// Gets or sets the value of variable expNotificationPopupHeader.
        /// </summary>
        [TestVariable("a7945c0d-66c6-42bf-b2af-f15ca3ce79bd")]
        public string expNotificationPopupHeader
        {
            get { return _expNotificationPopupHeader; }
            set { _expNotificationPopupHeader = value; }
        }

        string _expNotificationPopupText;

        /// <summary>
        /// Gets or sets the value of variable expNotificationPopupText.
        /// </summary>
        [TestVariable("6b665f9e-1a9a-4d91-b969-2891a67cb1a9")]
        public string expNotificationPopupText
        {
            get { return _expNotificationPopupText; }
            set { _expNotificationPopupText = value; }
        }

        string _res;

        /// <summary>
        /// Gets or sets the value of variable res.
        /// </summary>
        [TestVariable("ce5c870d-63db-4a19-a6c1-776cbf293575")]
        public string res
        {
            get { return _res; }
            set { _res = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            res = ValueConverter.ToString(UserCodeCollections.NS_Authorities.ValidateTextInNotificationPopup(expNotificationPopupHeader, expNotificationPopupText));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
