///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Track_Authorities
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The NS_Validate_AuthorityFeedbackMeesage recording.
    /// </summary>
    [TestModule("85e06210-1224-4e5c-b40a-494fd5ec973b", ModuleType.Recording, 1)]
    public partial class NS_Validate_AuthorityFeedbackMeesage : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.TrackAuthorities_Repo repository.
        /// </summary>
        public static global::PDS_NS.TrackAuthorities_Repo repo = global::PDS_NS.TrackAuthorities_Repo.Instance;

        static NS_Validate_AuthorityFeedbackMeesage instance = new NS_Validate_AuthorityFeedbackMeesage();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public NS_Validate_AuthorityFeedbackMeesage()
        {
            authority_type = "RW";
            to_person = "Mathew";
            at_station = "Smithville";
            between_station = "Smithville";
            between_and_station = "Arles";
            track_one = "MAIN";
            effective_until_time = "09:00 AM";
            feedback_message = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static NS_Validate_AuthorityFeedbackMeesage Instance
        {
            get { return instance; }
        }

#region Variables

        string _authority_type;

        /// <summary>
        /// Gets or sets the value of variable authority_type.
        /// </summary>
        [TestVariable("2e119c1b-5279-4dd7-970d-b1b309921de5")]
        public string authority_type
        {
            get { return _authority_type; }
            set { _authority_type = value; }
        }

        string _to_person;

        /// <summary>
        /// Gets or sets the value of variable to_person.
        /// </summary>
        [TestVariable("35c006be-1112-442a-b832-0e3a1fd58875")]
        public string to_person
        {
            get { return _to_person; }
            set { _to_person = value; }
        }

        string _at_station;

        /// <summary>
        /// Gets or sets the value of variable at_station.
        /// </summary>
        [TestVariable("a7516f5f-a6d0-4287-b82c-9286e9cce0da")]
        public string at_station
        {
            get { return _at_station; }
            set { _at_station = value; }
        }

        string _between_station;

        /// <summary>
        /// Gets or sets the value of variable between_station.
        /// </summary>
        [TestVariable("41244f96-069a-4c9d-9f7e-58225992a103")]
        public string between_station
        {
            get { return _between_station; }
            set { _between_station = value; }
        }

        string _between_and_station;

        /// <summary>
        /// Gets or sets the value of variable between_and_station.
        /// </summary>
        [TestVariable("16125684-81fc-4bbf-b021-898d31362e4b")]
        public string between_and_station
        {
            get { return _between_and_station; }
            set { _between_and_station = value; }
        }

        string _track_one;

        /// <summary>
        /// Gets or sets the value of variable track_one.
        /// </summary>
        [TestVariable("ebb789f4-cb8c-41df-9154-1c35a82130a0")]
        public string track_one
        {
            get { return _track_one; }
            set { _track_one = value; }
        }

        string _effective_until_time;

        /// <summary>
        /// Gets or sets the value of variable effective_until_time.
        /// </summary>
        [TestVariable("397bd64e-0c35-4c1c-8998-83768f8cd720")]
        public string effective_until_time
        {
            get { return _effective_until_time; }
            set { _effective_until_time = value; }
        }

        string _feedback_message;

        /// <summary>
        /// Gets or sets the value of variable feedback_message.
        /// </summary>
        [TestVariable("ba2972f4-65ac-4614-9157-c007273f2794")]
        public string feedback_message
        {
            get { return _feedback_message; }
            set { _feedback_message = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Authorities.NS_OpenAuthorityForm_MainMenu(authority_type);
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.To.NonEngineToTextInfo, repo.Create_Track_Authority.At.AtTextInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$to_person' on item 'Create_Track_Authority.To.NonEngineToText'.", repo.Create_Track_Authority.To.NonEngineToTextInfo, new RecordItemIndex(2));
            repo.Create_Track_Authority.To.NonEngineToText.Element.SetAttributeValue("Text", to_person);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(3));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.At.AtTextInfo, repo.Create_Track_Authority.Box3.WorkBetweenBetweenInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$at_station' on item 'Create_Track_Authority.At.AtText'.", repo.Create_Track_Authority.At.AtTextInfo, new RecordItemIndex(5));
            repo.Create_Track_Authority.At.AtText.Element.SetAttributeValue("Text", at_station);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(6));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box3.WorkBetweenBetweenInfo, repo.Create_Track_Authority.Box3.WorkBetweenAndInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$between_station' on item 'Create_Track_Authority.Box3.WorkBetweenBetween'.", repo.Create_Track_Authority.Box3.WorkBetweenBetweenInfo, new RecordItemIndex(8));
            repo.Create_Track_Authority.Box3.WorkBetweenBetween.Element.SetAttributeValue("Text", between_station);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(9));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box3.WorkBetweenAndInfo, repo.Create_Track_Authority.Box3.WorkBetweenTrack1Info);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$between_and_station' on item 'Create_Track_Authority.Box3.WorkBetweenAnd'.", repo.Create_Track_Authority.Box3.WorkBetweenAndInfo, new RecordItemIndex(11));
            repo.Create_Track_Authority.Box3.WorkBetweenAnd.Element.SetAttributeValue("Text", between_and_station);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(12));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box3.WorkBetweenTrack1Info, repo.Create_Track_Authority.Box5.EffectiveUntilTextInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$track_one' on item 'Create_Track_Authority.Box3.WorkBetweenTrack1'.", repo.Create_Track_Authority.Box3.WorkBetweenTrack1Info, new RecordItemIndex(14));
            repo.Create_Track_Authority.Box3.WorkBetweenTrack1.Element.SetAttributeValue("Text", track_one);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(15));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.LeftClickAndWaitForWithRetry(repo.Create_Track_Authority.Box5.EffectiveUntilTextInfo, repo.Create_Track_Authority.IssueButtonInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$effective_until_time' on item 'Create_Track_Authority.Box5.EffectiveUntilText'.", repo.Create_Track_Authority.Box5.EffectiveUntilTextInfo, new RecordItemIndex(17));
            repo.Create_Track_Authority.Box5.EffectiveUntilText.Element.SetAttributeValue("Text", effective_until_time);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(18));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(19));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$feedback_message) on item 'Create_Track_Authority.Feedback'.", repo.Create_Track_Authority.FeedbackInfo, new RecordItemIndex(20));
            Validate.AttributeContains(repo.Create_Track_Authority.FeedbackInfo, "Text", feedback_message);
            Delay.Milliseconds(0);
            
            PDS_CORE.Code_Utils.GeneralUtilities.ClickAndWaitForNotExistWithRetry(repo.Create_Track_Authority.CancelButtonInfo, repo.Create_Track_Authority.CancelButtonInfo);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
