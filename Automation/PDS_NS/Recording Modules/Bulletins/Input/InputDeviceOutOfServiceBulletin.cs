///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Bulletins.Input
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The InputDeviceOutOfServiceBulletin recording.
    /// </summary>
    [TestModule("e28e3885-3c80-4f15-be5d-8278779ee387", ModuleType.Recording, 1)]
    public partial class InputDeviceOutOfServiceBulletin : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static InputDeviceOutOfServiceBulletin instance = new InputDeviceOutOfServiceBulletin();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public InputDeviceOutOfServiceBulletin()
        {
            district = "";
            milepost = "";
            tracks = "";
            device = "";
            reason = "";
            issuedBy = "";
            effectiveTimeDifference = "";
            untilTimeDifference = "";
            expectedFeedback = "";
            bulletinSeed = "";
            pressComplete = "False";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static InputDeviceOutOfServiceBulletin Instance
        {
            get { return instance; }
        }

#region Variables

        string _district;

        /// <summary>
        /// Gets or sets the value of variable district.
        /// </summary>
        [TestVariable("92358277-c68c-4048-80ee-213889beab81")]
        public string district
        {
            get { return _district; }
            set { _district = value; }
        }

        string _milepost;

        /// <summary>
        /// Gets or sets the value of variable milepost.
        /// </summary>
        [TestVariable("5e0d32ed-c071-4ad0-9589-cabccd7b41f7")]
        public string milepost
        {
            get { return _milepost; }
            set { _milepost = value; }
        }

        string _tracks;

        /// <summary>
        /// Gets or sets the value of variable tracks.
        /// </summary>
        [TestVariable("279a9cf5-4855-4fdb-83ec-5e53e1b39cc5")]
        public string tracks
        {
            get { return _tracks; }
            set { _tracks = value; }
        }

        string _device;

        /// <summary>
        /// Gets or sets the value of variable device.
        /// </summary>
        [TestVariable("b28f6c94-265a-4222-99c1-d99a53654ca2")]
        public string device
        {
            get { return _device; }
            set { _device = value; }
        }

        string _reason;

        /// <summary>
        /// Gets or sets the value of variable reason.
        /// </summary>
        [TestVariable("883382d8-5141-47c8-b41f-0965c9fceef9")]
        public string reason
        {
            get { return _reason; }
            set { _reason = value; }
        }

        string _issuedBy;

        /// <summary>
        /// Gets or sets the value of variable issuedBy.
        /// </summary>
        [TestVariable("1e7fb5ed-31bc-40ee-8b62-06c1c4b9bdcc")]
        public string issuedBy
        {
            get { return _issuedBy; }
            set { _issuedBy = value; }
        }

        string _effectiveTimeDifference;

        /// <summary>
        /// Gets or sets the value of variable effectiveTimeDifference.
        /// </summary>
        [TestVariable("842fb72a-3690-4833-8ec4-e2d65913e803")]
        public string effectiveTimeDifference
        {
            get { return _effectiveTimeDifference; }
            set { _effectiveTimeDifference = value; }
        }

        string _untilTimeDifference;

        /// <summary>
        /// Gets or sets the value of variable untilTimeDifference.
        /// </summary>
        [TestVariable("c8f3ee94-27e8-4e87-89ff-6625e5250cdc")]
        public string untilTimeDifference
        {
            get { return _untilTimeDifference; }
            set { _untilTimeDifference = value; }
        }

        string _expectedFeedback;

        /// <summary>
        /// Gets or sets the value of variable expectedFeedback.
        /// </summary>
        [TestVariable("41f42494-83e8-433a-a33d-be5f21479a50")]
        public string expectedFeedback
        {
            get { return _expectedFeedback; }
            set { _expectedFeedback = value; }
        }

        string _bulletinSeed;

        /// <summary>
        /// Gets or sets the value of variable bulletinSeed.
        /// </summary>
        [TestVariable("cddeae78-84dc-40c9-a775-c1c78e2494d6")]
        public string bulletinSeed
        {
            get { return _bulletinSeed; }
            set { _bulletinSeed = value; }
        }

        string _pressComplete;

        /// <summary>
        /// Gets or sets the value of variable pressComplete.
        /// </summary>
        [TestVariable("13bcdb79-f25f-418f-b0c2-08f5dba1a9df")]
        public string pressComplete
        {
            get { return _pressComplete; }
            set { _pressComplete = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_InputBulletins.NS_InputDeviceOutOfServiceBulletin(bulletinSeed, district, milepost, tracks, device, reason, issuedBy, effectiveTimeDifference, untilTimeDifference, expectedFeedback, ValueConverter.ArgumentFromString<bool>("pressComplete", pressComplete));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
