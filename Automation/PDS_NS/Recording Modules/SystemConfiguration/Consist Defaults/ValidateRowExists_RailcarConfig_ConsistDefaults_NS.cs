///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.SystemConfiguration.Consist_Defaults
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateRowExists_RailcarConfig_ConsistDefaults_NS recording.
    /// </summary>
    [TestModule("91ac315e-2654-4666-bb66-06cbfbb562f0", ModuleType.Recording, 1)]
    public partial class ValidateRowExists_RailcarConfig_ConsistDefaults_NS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static ValidateRowExists_RailcarConfig_ConsistDefaults_NS instance = new ValidateRowExists_RailcarConfig_ConsistDefaults_NS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateRowExists_RailcarConfig_ConsistDefaults_NS()
        {
            expCarCategory = "";
            expAxles = "";
            expStreamLiningL = "";
            expStreamLiningT = "";
            expCrossSectionL = "";
            expCrossSectionT = "";
            expValidateExist = "True";
            closeForm = "False";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateRowExists_RailcarConfig_ConsistDefaults_NS Instance
        {
            get { return instance; }
        }

#region Variables

        string _expCarCategory;

        /// <summary>
        /// Gets or sets the value of variable expCarCategory.
        /// </summary>
        [TestVariable("d69948e6-c220-4156-8bff-7bbcdd775de3")]
        public string expCarCategory
        {
            get { return _expCarCategory; }
            set { _expCarCategory = value; }
        }

        string _expAxles;

        /// <summary>
        /// Gets or sets the value of variable expAxles.
        /// </summary>
        [TestVariable("040e446f-355a-4793-990b-7acbe173f858")]
        public string expAxles
        {
            get { return _expAxles; }
            set { _expAxles = value; }
        }

        string _expStreamLiningL;

        /// <summary>
        /// Gets or sets the value of variable expStreamLiningL.
        /// </summary>
        [TestVariable("d059d5ac-4504-4621-84c6-56192550be2c")]
        public string expStreamLiningL
        {
            get { return _expStreamLiningL; }
            set { _expStreamLiningL = value; }
        }

        string _expStreamLiningT;

        /// <summary>
        /// Gets or sets the value of variable expStreamLiningT.
        /// </summary>
        [TestVariable("1e774e60-c3ff-4810-b520-7a79fcbb1bf8")]
        public string expStreamLiningT
        {
            get { return _expStreamLiningT; }
            set { _expStreamLiningT = value; }
        }

        string _expCrossSectionL;

        /// <summary>
        /// Gets or sets the value of variable expCrossSectionL.
        /// </summary>
        [TestVariable("887dd892-f281-4d32-9d31-609f5ecff525")]
        public string expCrossSectionL
        {
            get { return _expCrossSectionL; }
            set { _expCrossSectionL = value; }
        }

        string _expCrossSectionT;

        /// <summary>
        /// Gets or sets the value of variable expCrossSectionT.
        /// </summary>
        [TestVariable("a0047ec6-7b66-4754-9942-e25957f1f55e")]
        public string expCrossSectionT
        {
            get { return _expCrossSectionT; }
            set { _expCrossSectionT = value; }
        }

        string _expValidateExist;

        /// <summary>
        /// Gets or sets the value of variable expValidateExist.
        /// </summary>
        [TestVariable("1ae953c8-d97b-4295-a9ec-1f5bb3c657dd")]
        public string expValidateExist
        {
            get { return _expValidateExist; }
            set { _expValidateExist = value; }
        }

        string _closeForm;

        /// <summary>
        /// Gets or sets the value of variable closeForm.
        /// </summary>
        [TestVariable("ed489acf-4efe-451c-8bd4-383b1c2eb2c7")]
        public string closeForm
        {
            get { return _closeForm; }
            set { _closeForm = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_SystemConfiguration.NS_ValidateRowExists_RailcarConfig_ConsistDefaults(expCarCategory, expAxles, expStreamLiningL, expStreamLiningT, expCrossSectionL, expCrossSectionT, ValueConverter.ArgumentFromString<bool>("expValidateExist", expValidateExist), ValueConverter.ArgumentFromString<bool>("closeForm", closeForm));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
