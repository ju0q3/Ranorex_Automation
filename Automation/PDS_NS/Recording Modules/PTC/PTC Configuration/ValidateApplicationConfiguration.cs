///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.PTC.PTC_Configuration
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateApplicationConfiguration recording.
    /// </summary>
    [TestModule("69a6b544-714f-4b60-8df9-09dcacd8f556", ModuleType.Recording, 1)]
    public partial class ValidateApplicationConfiguration : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.SystemConfiguration_Repo repository.
        /// </summary>
        public static global::PDS_NS.SystemConfiguration_Repo repo = global::PDS_NS.SystemConfiguration_Repo.Instance;

        static ValidateApplicationConfiguration instance = new ValidateApplicationConfiguration();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateApplicationConfiguration()
        {
            bulletinItemVoiceAck = "";
            bulletinItemCrewAck = "";
            trackAuthorityCrewAck = "";
            gpsTracking = "";
            switchPositionAwareness = "";
            ptcCIBOSDataTraffic = "";
            unsolicitedTCON = "";
            dispatchSuspendAll = "";
            dispatchResumeAll = "";
            saveCurrentDistrictStates = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateApplicationConfiguration Instance
        {
            get { return instance; }
        }

#region Variables

        string _bulletinItemVoiceAck;

        /// <summary>
        /// Gets or sets the value of variable bulletinItemVoiceAck.
        /// </summary>
        [TestVariable("0a2d43b8-d8a5-46ac-9d3a-823f7f56ce62")]
        public string bulletinItemVoiceAck
        {
            get { return _bulletinItemVoiceAck; }
            set { _bulletinItemVoiceAck = value; }
        }

        string _bulletinItemCrewAck;

        /// <summary>
        /// Gets or sets the value of variable bulletinItemCrewAck.
        /// </summary>
        [TestVariable("0c3407e4-4891-49a6-a39b-c6f81b463cbb")]
        public string bulletinItemCrewAck
        {
            get { return _bulletinItemCrewAck; }
            set { _bulletinItemCrewAck = value; }
        }

        string _trackAuthorityCrewAck;

        /// <summary>
        /// Gets or sets the value of variable trackAuthorityCrewAck.
        /// </summary>
        [TestVariable("6dfb5c86-d521-4bb4-8cb8-7457dbb3e6fa")]
        public string trackAuthorityCrewAck
        {
            get { return _trackAuthorityCrewAck; }
            set { _trackAuthorityCrewAck = value; }
        }

        string _gpsTracking;

        /// <summary>
        /// Gets or sets the value of variable gpsTracking.
        /// </summary>
        [TestVariable("bfac5ae1-5c74-4d83-be45-54d365606dd9")]
        public string gpsTracking
        {
            get { return _gpsTracking; }
            set { _gpsTracking = value; }
        }

        string _switchPositionAwareness;

        /// <summary>
        /// Gets or sets the value of variable switchPositionAwareness.
        /// </summary>
        [TestVariable("e001c9aa-02b6-4eb0-babd-3fabf5bdba80")]
        public string switchPositionAwareness
        {
            get { return _switchPositionAwareness; }
            set { _switchPositionAwareness = value; }
        }

        string _ptcCIBOSDataTraffic;

        /// <summary>
        /// Gets or sets the value of variable ptcCIBOSDataTraffic.
        /// </summary>
        [TestVariable("3f41dd19-432f-46a7-a444-828fdef666b2")]
        public string ptcCIBOSDataTraffic
        {
            get { return _ptcCIBOSDataTraffic; }
            set { _ptcCIBOSDataTraffic = value; }
        }

        string _unsolicitedTCON;

        /// <summary>
        /// Gets or sets the value of variable unsolicitedTCON.
        /// </summary>
        [TestVariable("d0a16047-8c20-455d-a19b-0d22bcf72bd9")]
        public string unsolicitedTCON
        {
            get { return _unsolicitedTCON; }
            set { _unsolicitedTCON = value; }
        }

        string _dispatchSuspendAll;

        /// <summary>
        /// Gets or sets the value of variable dispatchSuspendAll.
        /// </summary>
        [TestVariable("f320ca50-283f-4bbd-8e76-495eac2eac41")]
        public string dispatchSuspendAll
        {
            get { return _dispatchSuspendAll; }
            set { _dispatchSuspendAll = value; }
        }

        string _dispatchResumeAll;

        /// <summary>
        /// Gets or sets the value of variable dispatchResumeAll.
        /// </summary>
        [TestVariable("c26a437d-6b20-4dc4-8200-33162e5fe11e")]
        public string dispatchResumeAll
        {
            get { return _dispatchResumeAll; }
            set { _dispatchResumeAll = value; }
        }

        string _saveCurrentDistrictStates;

        /// <summary>
        /// Gets or sets the value of variable saveCurrentDistrictStates.
        /// </summary>
        [TestVariable("1b6adce4-2aa8-4d32-89ba-13b848481206")]
        public string saveCurrentDistrictStates
        {
            get { return _saveCurrentDistrictStates; }
            set { _saveCurrentDistrictStates = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_PTC_Configuration.NS_OpenPTCConfigurationForm_ApplicationConfiguration_MainMenu();
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$bulletinItemVoiceAck) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.BulletinItemVoiceAcknowledgementRequiredCheckbox'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.BulletinItemVoiceAcknowledgementRequiredCheckboxInfo, new RecordItemIndex(1));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.BulletinItemVoiceAcknowledgementRequiredCheckboxInfo, "Checked", bulletinItemVoiceAck, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$bulletinItemCrewAck) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.BulletinItemCrewAcknowledgementRequiredCheckbox'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.BulletinItemCrewAcknowledgementRequiredCheckboxInfo, new RecordItemIndex(2));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.BulletinItemCrewAcknowledgementRequiredCheckboxInfo, "Checked", bulletinItemCrewAck, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$trackAuthorityCrewAck) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.TrackAuthorityCrewAcknowledgementRequiredCheckbox'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.TrackAuthorityCrewAcknowledgementRequiredCheckboxInfo, new RecordItemIndex(3));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.TrackAuthorityCrewAcknowledgementRequiredCheckboxInfo, "Checked", trackAuthorityCrewAck, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$gpsTracking) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.EnableGPSTrackingCheckbox'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnableGPSTrackingCheckboxInfo, new RecordItemIndex(4));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnableGPSTrackingCheckboxInfo, "Checked", gpsTracking, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$switchPositionAwareness) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.EnableSwitchPositionAwarenessIndicationsCheckbox'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnableSwitchPositionAwarenessIndicationsCheckboxInfo, new RecordItemIndex(5));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnableSwitchPositionAwarenessIndicationsCheckboxInfo, "Checked", switchPositionAwareness, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$ptcCIBOSDataTraffic) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.EnablePTCCIBOSDataTrafficCheckbox'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnablePTCCIBOSDataTrafficCheckboxInfo, new RecordItemIndex(6));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnablePTCCIBOSDataTrafficCheckboxInfo, "Checked", ptcCIBOSDataTraffic, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$unsolicitedTCON) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.EnableUnsolicitedTCONMessageCheckbox'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnableUnsolicitedTCONMessageCheckboxInfo, new RecordItemIndex(7));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.EnableUnsolicitedTCONMessageCheckboxInfo, "Checked", unsolicitedTCON, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$dispatchSuspendAll) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.DispatchSuspendAll'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.DispatchSuspendAllInfo, new RecordItemIndex(8));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.DispatchSuspendAllInfo, "Checked", dispatchSuspendAll, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$dispatchResumeAll) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.DispatchResumeAll'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.DispatchResumeAllInfo, new RecordItemIndex(9));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.DispatchResumeAllInfo, "Checked", dispatchResumeAll, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked=$saveCurrentDistrictStates) on item 'Positive_Train_Control_Configuration.ApplicationConfiguration.SaveCurrentDistrictStates'.", repo.Positive_Train_Control_Configuration.ApplicationConfiguration.SaveCurrentDistrictStatesInfo, new RecordItemIndex(10));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.ApplicationConfiguration.SaveCurrentDistrictStatesInfo, "Checked", saveCurrentDistrictStates, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                PDS_CORE.Code_Utils.GeneralUtilities.ClickAndWaitForNotExistWithRetry(repo.Positive_Train_Control_Configuration.CancelButtonInfo, repo.Positive_Train_Control_Configuration.SelfInfo);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
