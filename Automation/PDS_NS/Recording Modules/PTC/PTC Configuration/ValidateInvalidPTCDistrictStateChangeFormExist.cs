///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.PTC.PTC_Configuration
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateInvalidPTCDistrictStateChangeFormExist recording.
    /// </summary>
    [TestModule("44fee23d-e108-4d9f-a7c8-7c8edecc29bd", ModuleType.Recording, 1)]
    public partial class ValidateInvalidPTCDistrictStateChangeFormExist : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static ValidateInvalidPTCDistrictStateChangeFormExist instance = new ValidateInvalidPTCDistrictStateChangeFormExist();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateInvalidPTCDistrictStateChangeFormExist()
        {
            division = "";
            district = "";
            districtMode = "";
            enablePTCMessages = "False";
            validateExist = "False";
            closePTCConfigurationForm = "False";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateInvalidPTCDistrictStateChangeFormExist Instance
        {
            get { return instance; }
        }

#region Variables

        string _division;

        /// <summary>
        /// Gets or sets the value of variable division.
        /// </summary>
        [TestVariable("eb6fe526-dfee-4292-9a23-5ab2e08ffd55")]
        public string division
        {
            get { return _division; }
            set { _division = value; }
        }

        string _district;

        /// <summary>
        /// Gets or sets the value of variable district.
        /// </summary>
        [TestVariable("f6ed4842-d1a1-4d25-9ddb-5a3220ea36a4")]
        public string district
        {
            get { return _district; }
            set { _district = value; }
        }

        string _districtMode;

        /// <summary>
        /// Gets or sets the value of variable districtMode.
        /// </summary>
        [TestVariable("31ac376f-d24f-4cb5-adcf-6ea8e3cb0d6b")]
        public string districtMode
        {
            get { return _districtMode; }
            set { _districtMode = value; }
        }

        string _enablePTCMessages;

        /// <summary>
        /// Gets or sets the value of variable enablePTCMessages.
        /// </summary>
        [TestVariable("52f0c43f-498a-4697-a3c1-ea362f40b75a")]
        public string enablePTCMessages
        {
            get { return _enablePTCMessages; }
            set { _enablePTCMessages = value; }
        }

        string _validateExist;

        /// <summary>
        /// Gets or sets the value of variable validateExist.
        /// </summary>
        [TestVariable("abd8e1f7-d5c3-4ec7-9d9b-e881a7e7c134")]
        public string validateExist
        {
            get { return _validateExist; }
            set { _validateExist = value; }
        }

        string _closePTCConfigurationForm;

        /// <summary>
        /// Gets or sets the value of variable closePTCConfigurationForm.
        /// </summary>
        [TestVariable("441a1bd1-4f26-4d40-9f32-3377b266f994")]
        public string closePTCConfigurationForm
        {
            get { return _closePTCConfigurationForm; }
            set { _closePTCConfigurationForm = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_PTC_Configuration.ValidateInvalidPTCDistrictStateChangeExist_NS(division, district, districtMode, ValueConverter.ArgumentFromString<bool>("clickApply", "False"), ValueConverter.ArgumentFromString<bool>("enablePTCMessages", enablePTCMessages), ValueConverter.ArgumentFromString<bool>("validateExist", validateExist), ValueConverter.ArgumentFromString<bool>("closePTCConfigurationForm", closePTCConfigurationForm));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
