///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.PTC.PTC_Configuration
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DSSR_ChangeSuspendDuration recording.
    /// </summary>
    [TestModule("51b5eb6e-4c80-4a78-ab63-201dae93102a", ModuleType.Recording, 1)]
    public partial class DSSR_ChangeSuspendDuration : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.SystemConfiguration_Repo repository.
        /// </summary>
        public static global::PDS_NS.SystemConfiguration_Repo repo = global::PDS_NS.SystemConfiguration_Repo.Instance;

        static DSSR_ChangeSuspendDuration instance = new DSSR_ChangeSuspendDuration();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DSSR_ChangeSuspendDuration()
        {
            suspendDuration = "";
            feedback = "";
            closeForm = "False";
            pressApply = "False";
            pressReset = "False";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DSSR_ChangeSuspendDuration Instance
        {
            get { return instance; }
        }

#region Variables

        string _suspendDuration;

        /// <summary>
        /// Gets or sets the value of variable suspendDuration.
        /// </summary>
        [TestVariable("c796aecd-19eb-466a-b39c-190e22833370")]
        public string suspendDuration
        {
            get { return _suspendDuration; }
            set { _suspendDuration = value; }
        }

        string _feedback;

        /// <summary>
        /// Gets or sets the value of variable feedback.
        /// </summary>
        [TestVariable("c1eac9f0-34b6-4f84-a640-4c701d345923")]
        public string feedback
        {
            get { return _feedback; }
            set { _feedback = value; }
        }

        string _closeForm;

        /// <summary>
        /// Gets or sets the value of variable closeForm.
        /// </summary>
        [TestVariable("92548ea5-f3f9-464f-82ff-c7b57bfe10ec")]
        public string closeForm
        {
            get { return _closeForm; }
            set { _closeForm = value; }
        }

        string _pressApply;

        /// <summary>
        /// Gets or sets the value of variable pressApply.
        /// </summary>
        [TestVariable("6615737d-e180-4c4f-8092-731bbae74a6e")]
        public string pressApply
        {
            get { return _pressApply; }
            set { _pressApply = value; }
        }

        string _pressReset;

        /// <summary>
        /// Gets or sets the value of variable pressReset.
        /// </summary>
        [TestVariable("526be709-8310-4f54-a3c5-6bbacc620dfd")]
        public string pressReset
        {
            get { return _pressReset; }
            set { _pressReset = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_PTC_Configuration.NS_OpenPTCConfigurationForm_CommunicationConfiguration_MainMenu();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationText' at Center.", repo.Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationTextInfo, new RecordItemIndex(1));
            repo.Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationText.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence from variable '$suspendDuration' with focus on 'Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationText'.", repo.Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationTextInfo, new RecordItemIndex(2));
                repo.Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationText.PressKeys(suspendDuration);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text=$feedback) on item 'Positive_Train_Control_Configuration.Feedback'.", repo.Positive_Train_Control_Configuration.FeedbackInfo, new RecordItemIndex(3));
                Validate.AttributeEqual(repo.Positive_Train_Control_Configuration.FeedbackInfo, "Text", feedback, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey 'Tab' Press with focus on 'Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationText'.", repo.Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationTextInfo, new RecordItemIndex(4));
                Keyboard.PrepareFocus(repo.Positive_Train_Control_Configuration.CommunicationConfiguration.SuspendDurationText);
                Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(5));
            Delay.Duration(500, false);
            
            UserCodeCollections.NS_PTC_Configuration.NS_ApplyPTCConfiguration(ValueConverter.ArgumentFromString<bool>("pressApply", pressApply));
            Delay.Milliseconds(0);
            
            UserCodeCollections.NS_PTC_Configuration.NS_ResetPTCConfiguration(ValueConverter.ArgumentFromString<bool>("pressReset", pressReset));
            Delay.Milliseconds(0);
            
            UserCodeCollections.NS_PTC_Configuration.NS_ClosePTCConfigurationForm(ValueConverter.ArgumentFromString<bool>("closeForm", closeForm));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
