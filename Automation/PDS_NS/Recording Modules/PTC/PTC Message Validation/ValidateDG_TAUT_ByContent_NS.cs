///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.PTC.PTC_Message_Validation
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidateDG_TAUT_ByContent_NS recording.
    /// </summary>
    [TestModule("4a97e51c-11b1-4f91-bfff-99bd2ea80435", ModuleType.Recording, 1)]
    public partial class ValidateDG_TAUT_ByContent_NS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static ValidateDG_TAUT_ByContent_NS instance = new ValidateDG_TAUT_ByContent_NS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidateDG_TAUT_ByContent_NS()
        {
            authoritySeed = "";
            action = "";
            optDistrict = "";
            optCrewAckRequired = "";
            optElectronicAckRequested = "";
            timeInSeconds = "5";
            retry = "True";
            optCrewAckType = "";
            validateNoCrewAckType = "False";
            optAdditionalFilters = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidateDG_TAUT_ByContent_NS Instance
        {
            get { return instance; }
        }

#region Variables

        string _authoritySeed;

        /// <summary>
        /// Gets or sets the value of variable authoritySeed.
        /// </summary>
        [TestVariable("bfa025df-2578-4053-a35f-b05ab7322717")]
        public string authoritySeed
        {
            get { return _authoritySeed; }
            set { _authoritySeed = value; }
        }

        string _action;

        /// <summary>
        /// Gets or sets the value of variable action.
        /// </summary>
        [TestVariable("67dd7c5f-f5f1-4391-9f26-0357c785cb10")]
        public string action
        {
            get { return _action; }
            set { _action = value; }
        }

        string _optDistrict;

        /// <summary>
        /// Gets or sets the value of variable optDistrict.
        /// </summary>
        [TestVariable("a8f0a737-aa02-4ab7-b7b5-3463b229760a")]
        public string optDistrict
        {
            get { return _optDistrict; }
            set { _optDistrict = value; }
        }

        string _optCrewAckRequired;

        /// <summary>
        /// Gets or sets the value of variable optCrewAckRequired.
        /// </summary>
        [TestVariable("69aca9c0-eb67-4889-be9c-3a38e40bc342")]
        public string optCrewAckRequired
        {
            get { return _optCrewAckRequired; }
            set { _optCrewAckRequired = value; }
        }

        string _optElectronicAckRequested;

        /// <summary>
        /// Gets or sets the value of variable optElectronicAckRequested.
        /// </summary>
        [TestVariable("ca08ff1d-026b-46c3-a53a-18ccf05de0a5")]
        public string optElectronicAckRequested
        {
            get { return _optElectronicAckRequested; }
            set { _optElectronicAckRequested = value; }
        }

        string _timeInSeconds;

        /// <summary>
        /// Gets or sets the value of variable timeInSeconds.
        /// </summary>
        [TestVariable("e7f2f037-2089-4c03-963b-a27f3a1f0a32")]
        public string timeInSeconds
        {
            get { return _timeInSeconds; }
            set { _timeInSeconds = value; }
        }

        string _retry;

        /// <summary>
        /// Gets or sets the value of variable retry.
        /// </summary>
        [TestVariable("823833c8-0e7d-4e63-897d-74bd1c9ba217")]
        public string retry
        {
            get { return _retry; }
            set { _retry = value; }
        }

        string _optCrewAckType;

        /// <summary>
        /// Gets or sets the value of variable optCrewAckType.
        /// </summary>
        [TestVariable("39630fa0-e1f5-4fa1-9885-8ff97c0e3b97")]
        public string optCrewAckType
        {
            get { return _optCrewAckType; }
            set { _optCrewAckType = value; }
        }

        string _validateNoCrewAckType;

        /// <summary>
        /// Gets or sets the value of variable validateNoCrewAckType.
        /// </summary>
        [TestVariable("3e90070c-5a74-4ac6-b122-edb4194e85f5")]
        public string validateNoCrewAckType
        {
            get { return _validateNoCrewAckType; }
            set { _validateNoCrewAckType = value; }
        }

        string _optAdditionalFilters;

        /// <summary>
        /// Gets or sets the value of variable optAdditionalFilters.
        /// </summary>
        [TestVariable("a14f2d02-9f5c-49cc-a64d-489377485aca")]
        public string optAdditionalFilters
        {
            get { return _optAdditionalFilters; }
            set { _optAdditionalFilters = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_PTC_Message_Validations.ValidateDG_TAUT_ByContent(authoritySeed, action, optDistrict, optCrewAckRequired, optElectronicAckRequested, optCrewAckType, optAdditionalFilters, ValueConverter.ArgumentFromString<bool>("validateNoCrewAckType", validateNoCrewAckType), ValueConverter.ArgumentFromString<int>("timeInSeconds", timeInSeconds), ValueConverter.ArgumentFromString<bool>("retry", retry));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
