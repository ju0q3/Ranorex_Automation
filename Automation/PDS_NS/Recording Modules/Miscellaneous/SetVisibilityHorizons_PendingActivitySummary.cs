///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Miscellaneous
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SetVisibilityHorizons_PendingActivitySummary recording.
    /// </summary>
    [TestModule("5193790f-53eb-4f82-baf0-e1850eee907f", ModuleType.Recording, 1)]
    public partial class SetVisibilityHorizons_PendingActivitySummary : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static SetVisibilityHorizons_PendingActivitySummary instance = new SetVisibilityHorizons_PendingActivitySummary();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SetVisibilityHorizons_PendingActivitySummary()
        {
            activities = "";
            assignedWork = "";
            exceptions = "";
            crewCall = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SetVisibilityHorizons_PendingActivitySummary Instance
        {
            get { return instance; }
        }

#region Variables

        string _activities;

        /// <summary>
        /// Gets or sets the value of variable activities.
        /// </summary>
        [TestVariable("4d3810d5-472a-4322-8b20-6d465096626a")]
        public string activities
        {
            get { return _activities; }
            set { _activities = value; }
        }

        string _assignedWork;

        /// <summary>
        /// Gets or sets the value of variable assignedWork.
        /// </summary>
        [TestVariable("3730b884-4981-4df8-8936-e60526968413")]
        public string assignedWork
        {
            get { return _assignedWork; }
            set { _assignedWork = value; }
        }

        string _exceptions;

        /// <summary>
        /// Gets or sets the value of variable exceptions.
        /// </summary>
        [TestVariable("9fc1a750-09da-4f53-b2a6-d19b5e246705")]
        public string exceptions
        {
            get { return _exceptions; }
            set { _exceptions = value; }
        }

        string _crewCall;

        /// <summary>
        /// Gets or sets the value of variable crewCall.
        /// </summary>
        [TestVariable("d7b12e81-ff37-4d83-843c-066994276e72")]
        public string crewCall
        {
            get { return _crewCall; }
            set { _crewCall = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Miscellaneous.NS_SetVisibilityHorizons_PendingActivitySummary(activities, assignedWork, exceptions, crewCall);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
