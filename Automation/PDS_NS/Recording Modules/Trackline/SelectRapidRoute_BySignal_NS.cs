///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Trackline
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SelectRapidRoute_BySignal_NS recording.
    /// </summary>
    [TestModule("c61d54d8-b278-424d-b7db-bfc301d475e7", ModuleType.Recording, 1)]
    public partial class SelectRapidRoute_BySignal_NS : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static SelectRapidRoute_BySignal_NS instance = new SelectRapidRoute_BySignal_NS();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SelectRapidRoute_BySignal_NS()
        {
            signalId = "";
            rrMenuOption = "";
            clickAcknowledgeIfExists = "True";
            expectedFeedback = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SelectRapidRoute_BySignal_NS Instance
        {
            get { return instance; }
        }

#region Variables

        string _signalId;

        /// <summary>
        /// Gets or sets the value of variable signalId.
        /// </summary>
        [TestVariable("72c06260-07ae-426a-9da4-79283187f7c6")]
        public string signalId
        {
            get { return _signalId; }
            set { _signalId = value; }
        }

        string _rrMenuOption;

        /// <summary>
        /// Gets or sets the value of variable rrMenuOption.
        /// </summary>
        [TestVariable("01a87083-90ae-4f23-8d1d-6ffa8188de96")]
        public string rrMenuOption
        {
            get { return _rrMenuOption; }
            set { _rrMenuOption = value; }
        }

        string _clickAcknowledgeIfExists;

        /// <summary>
        /// Gets or sets the value of variable clickAcknowledgeIfExists.
        /// </summary>
        [TestVariable("f797d577-579f-405e-917c-8171143081fd")]
        public string clickAcknowledgeIfExists
        {
            get { return _clickAcknowledgeIfExists; }
            set { _clickAcknowledgeIfExists = value; }
        }

        string _expectedFeedback;

        /// <summary>
        /// Gets or sets the value of variable expectedFeedback.
        /// </summary>
        [TestVariable("8008e576-0ac1-40d8-9f59-88f61a8d29c2")]
        public string expectedFeedback
        {
            get { return _expectedFeedback; }
            set { _expectedFeedback = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Trackline.NS_RapidRouteMenuOption_BySignal(signalId, rrMenuOption, ValueConverter.ArgumentFromString<bool>("clickAcknowledgeIfExists", clickAcknowledgeIfExists), expectedFeedback);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
