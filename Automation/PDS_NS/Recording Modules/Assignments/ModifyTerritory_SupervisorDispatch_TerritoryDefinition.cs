///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PDS_NS.Recording_Modules.Assignments
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ModifyTerritory_SupervisorDispatch_TerritoryDefinition recording.
    /// </summary>
    [TestModule("331dd983-4b7d-4fda-851a-a074e8709adb", ModuleType.Recording, 1)]
    public partial class ModifyTerritory_SupervisorDispatch_TerritoryDefinition : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PDS_NS.PDS_NSRepository repository.
        /// </summary>
        public static global::PDS_NS.PDS_NSRepository repo = global::PDS_NS.PDS_NSRepository.Instance;

        static ModifyTerritory_SupervisorDispatch_TerritoryDefinition instance = new ModifyTerritory_SupervisorDispatch_TerritoryDefinition();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ModifyTerritory_SupervisorDispatch_TerritoryDefinition()
        {
            territoryName = "";
            dispatchPositonType = "";
            dispatchPostionName = "";
            removePosition = "False";
            addPosition = "False";
            reset = "False";
            apply = "False";
            closeForms = "False";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ModifyTerritory_SupervisorDispatch_TerritoryDefinition Instance
        {
            get { return instance; }
        }

#region Variables

        string _territoryName;

        /// <summary>
        /// Gets or sets the value of variable territoryName.
        /// </summary>
        [TestVariable("f79313da-502f-47c8-a5d6-f147e9339d5c")]
        public string territoryName
        {
            get { return _territoryName; }
            set { _territoryName = value; }
        }

        string _dispatchPositonType;

        /// <summary>
        /// Gets or sets the value of variable dispatchPositonType.
        /// </summary>
        [TestVariable("fe95e47b-9ccb-406f-bf25-6aceeb2a35e0")]
        public string dispatchPositonType
        {
            get { return _dispatchPositonType; }
            set { _dispatchPositonType = value; }
        }

        string _dispatchPostionName;

        /// <summary>
        /// Gets or sets the value of variable dispatchPostionName.
        /// </summary>
        [TestVariable("0862e381-85c2-4ffb-ac36-bcabca313c0f")]
        public string dispatchPostionName
        {
            get { return _dispatchPostionName; }
            set { _dispatchPostionName = value; }
        }

        string _removePosition;

        /// <summary>
        /// Gets or sets the value of variable removePosition.
        /// </summary>
        [TestVariable("480f45ce-48c3-4993-a22e-8ff11772fc2b")]
        public string removePosition
        {
            get { return _removePosition; }
            set { _removePosition = value; }
        }

        string _addPosition;

        /// <summary>
        /// Gets or sets the value of variable addPosition.
        /// </summary>
        [TestVariable("33f688f2-30b2-4d53-babe-1799b23c51ff")]
        public string addPosition
        {
            get { return _addPosition; }
            set { _addPosition = value; }
        }

        string _reset;

        /// <summary>
        /// Gets or sets the value of variable reset.
        /// </summary>
        [TestVariable("c617d79f-919c-4c3b-be98-9c67235d7e9b")]
        public string reset
        {
            get { return _reset; }
            set { _reset = value; }
        }

        string _apply;

        /// <summary>
        /// Gets or sets the value of variable apply.
        /// </summary>
        [TestVariable("7177af3f-f515-4310-9af7-e207b1de9855")]
        public string apply
        {
            get { return _apply; }
            set { _apply = value; }
        }

        string _closeForms;

        /// <summary>
        /// Gets or sets the value of variable closeForms.
        /// </summary>
        [TestVariable("36cc69da-3d1f-453d-91c8-4c0bba87b6a8")]
        public string closeForms
        {
            get { return _closeForms; }
            set { _closeForms = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            UserCodeCollections.NS_Assignments.NS_ModifyTerritory_SupervisorDispatch_TerritoryDefinition(territoryName, dispatchPositonType, dispatchPostionName, ValueConverter.ArgumentFromString<bool>("removePosition", removePosition), ValueConverter.ArgumentFromString<bool>("addPosition", addPosition), ValueConverter.ArgumentFromString<bool>("reset", reset), ValueConverter.ArgumentFromString<bool>("apply", apply), ValueConverter.ArgumentFromString<bool>("closeForms", closeForms));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
