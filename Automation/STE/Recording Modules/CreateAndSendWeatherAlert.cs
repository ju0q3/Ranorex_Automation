///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace STE.Recording_Modules
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CreateAndSendWeatherAlert recording.
    /// </summary>
    [TestModule("6d18bebf-7ca8-492b-8309-d82a0728d644", ModuleType.Recording, 1)]
    public partial class CreateAndSendWeatherAlert : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::STE.STERepository repository.
        /// </summary>
        public static global::STE.STERepository repo = global::STE.STERepository.Instance;

        static CreateAndSendWeatherAlert instance = new CreateAndSendWeatherAlert();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CreateAndSendWeatherAlert()
        {
            protocolId = "1";
            messageId = "WeatherAlert";
            traceId = "1";
            messageVersion = "0";
            weatherReportId = "1";
            operatorInitials = "DNA";
            state = "GA";
            division = "GULF";
            weatherMessage = "1";
            severeWeatherCode = "29";
            severeWeatherCondition = "Storm";
            severityLevel = "WATCH";
            weatherDescription = "Severe Conditions";
            weatherDetails = "Take Shelter";
            timezone = "EST";
            inEffectTimeOffset = "0";
            untilTimeOffset = "30";
            recipientId = "1";
            warningNumber = "1";
            warningVersion = "1";
            stationRecords = "||BEAUMONT|60|77|MAIN";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CreateAndSendWeatherAlert Instance
        {
            get { return instance; }
        }

#region Variables

        string _protocolId;

        /// <summary>
        /// Gets or sets the value of variable protocolId.
        /// </summary>
        [TestVariable("641ad15b-0a5b-44a0-98fd-f8d2101665f2")]
        public string protocolId
        {
            get { return _protocolId; }
            set { _protocolId = value; }
        }

        string _messageId;

        /// <summary>
        /// Gets or sets the value of variable messageId.
        /// </summary>
        [TestVariable("965fba57-9047-4e12-a7ba-59dcdafe2e3a")]
        public string messageId
        {
            get { return _messageId; }
            set { _messageId = value; }
        }

        string _traceId;

        /// <summary>
        /// Gets or sets the value of variable traceId.
        /// </summary>
        [TestVariable("ca58be4e-ebfc-44fc-a14e-5493e9eae381")]
        public string traceId
        {
            get { return _traceId; }
            set { _traceId = value; }
        }

        string _messageVersion;

        /// <summary>
        /// Gets or sets the value of variable messageVersion.
        /// </summary>
        [TestVariable("ef0903b6-214d-4bb8-8160-ab83f0355c7f")]
        public string messageVersion
        {
            get { return _messageVersion; }
            set { _messageVersion = value; }
        }

        string _weatherReportId;

        /// <summary>
        /// Gets or sets the value of variable weatherReportId.
        /// </summary>
        [TestVariable("db50f39c-3d1e-4017-a892-0e2a60da11c2")]
        public string weatherReportId
        {
            get { return _weatherReportId; }
            set { _weatherReportId = value; }
        }

        string _operatorInitials;

        /// <summary>
        /// Gets or sets the value of variable operatorInitials.
        /// </summary>
        [TestVariable("d8e0482e-03a9-4d64-8a4a-eb0ca61482df")]
        public string operatorInitials
        {
            get { return _operatorInitials; }
            set { _operatorInitials = value; }
        }

        string _state;

        /// <summary>
        /// Gets or sets the value of variable state.
        /// </summary>
        [TestVariable("810c8eda-63e2-4ac2-964c-396794178a20")]
        public string state
        {
            get { return _state; }
            set { _state = value; }
        }

        string _division;

        /// <summary>
        /// Gets or sets the value of variable division.
        /// </summary>
        [TestVariable("8a9fe2fc-1362-463c-9994-32560ad11742")]
        public string division
        {
            get { return _division; }
            set { _division = value; }
        }

        string _weatherMessage;

        /// <summary>
        /// Gets or sets the value of variable weatherMessage.
        /// </summary>
        [TestVariable("857a35b4-e245-4f7c-b535-30914896b51e")]
        public string weatherMessage
        {
            get { return _weatherMessage; }
            set { _weatherMessage = value; }
        }

        string _severeWeatherCode;

        /// <summary>
        /// Gets or sets the value of variable severeWeatherCode.
        /// </summary>
        [TestVariable("5feab5af-f644-47e8-84eb-ba1317103532")]
        public string severeWeatherCode
        {
            get { return _severeWeatherCode; }
            set { _severeWeatherCode = value; }
        }

        string _severeWeatherCondition;

        /// <summary>
        /// Gets or sets the value of variable severeWeatherCondition.
        /// </summary>
        [TestVariable("ef9c77ed-182b-4f2a-ae18-cdca76205dba")]
        public string severeWeatherCondition
        {
            get { return _severeWeatherCondition; }
            set { _severeWeatherCondition = value; }
        }

        string _severityLevel;

        /// <summary>
        /// Gets or sets the value of variable severityLevel.
        /// </summary>
        [TestVariable("cd0eb5fd-0b29-44a4-b8c2-51b1fef17c0a")]
        public string severityLevel
        {
            get { return _severityLevel; }
            set { _severityLevel = value; }
        }

        string _weatherDescription;

        /// <summary>
        /// Gets or sets the value of variable weatherDescription.
        /// </summary>
        [TestVariable("cb7cb6e1-696d-43ea-b58a-04fa2ae02eff")]
        public string weatherDescription
        {
            get { return _weatherDescription; }
            set { _weatherDescription = value; }
        }

        string _weatherDetails;

        /// <summary>
        /// Gets or sets the value of variable weatherDetails.
        /// </summary>
        [TestVariable("458771e0-f3be-4d7c-ba0d-d984926fa6c8")]
        public string weatherDetails
        {
            get { return _weatherDetails; }
            set { _weatherDetails = value; }
        }

        string _timezone;

        /// <summary>
        /// Gets or sets the value of variable timezone.
        /// </summary>
        [TestVariable("dbd83d04-28bc-4c11-93a3-e217a6510fc3")]
        public string timezone
        {
            get { return _timezone; }
            set { _timezone = value; }
        }

        string _inEffectTimeOffset;

        /// <summary>
        /// Gets or sets the value of variable inEffectTimeOffset.
        /// </summary>
        [TestVariable("a18a993c-597c-4c16-874f-4d120d009899")]
        public string inEffectTimeOffset
        {
            get { return _inEffectTimeOffset; }
            set { _inEffectTimeOffset = value; }
        }

        string _untilTimeOffset;

        /// <summary>
        /// Gets or sets the value of variable untilTimeOffset.
        /// </summary>
        [TestVariable("05386ca3-8cb6-4b17-843f-992db8fdb4f8")]
        public string untilTimeOffset
        {
            get { return _untilTimeOffset; }
            set { _untilTimeOffset = value; }
        }

        string _recipientId;

        /// <summary>
        /// Gets or sets the value of variable recipientId.
        /// </summary>
        [TestVariable("b61ad496-0bae-48ef-9f59-7a606eafcd08")]
        public string recipientId
        {
            get { return _recipientId; }
            set { _recipientId = value; }
        }

        string _warningNumber;

        /// <summary>
        /// Gets or sets the value of variable warningNumber.
        /// </summary>
        [TestVariable("dfd03f7d-065d-4d9a-a214-f061d8cf18ca")]
        public string warningNumber
        {
            get { return _warningNumber; }
            set { _warningNumber = value; }
        }

        string _warningVersion;

        /// <summary>
        /// Gets or sets the value of variable warningVersion.
        /// </summary>
        [TestVariable("c3b6f41a-5d2b-48a6-b750-9fc2ce2e8de9")]
        public string warningVersion
        {
            get { return _warningVersion; }
            set { _warningVersion = value; }
        }

        string _stationRecords;

        /// <summary>
        /// Gets or sets the value of variable stationRecords.
        /// </summary>
        [TestVariable("3023448d-e8f1-4eac-bcd8-0598b978b251")]
        public string stationRecords
        {
            get { return _stationRecords; }
            set { _stationRecords = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Code_Utils.SendMISFileCollection_CN.createWeatherAlert(protocolId, messageId, traceId, messageVersion, weatherReportId, operatorInitials, state, division, weatherMessage, severeWeatherCode, severeWeatherCondition, severityLevel, weatherDescription, weatherDetails, timezone, inEffectTimeOffset, untilTimeOffset, recipientId, warningNumber, warningVersion, stationRecords);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
