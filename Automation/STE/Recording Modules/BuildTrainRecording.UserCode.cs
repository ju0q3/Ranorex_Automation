///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using STE.Code_Utils;
using STE.Code_Utils.messages;
using STE.Code_Utils.messages.test;
using STE.Code_Utils.messages.MIS.CN;


namespace STE.Recording_Modules
{
	public class MyXmlTextWriter : XmlTextWriter
	{
	    public MyXmlTextWriter(Stream stream) : base(stream, Encoding.UTF8)
	    {
	
	    }
	
	    public override void WriteEndElement()
	    {
	        base.WriteFullEndElement();
	    }
	}
	
	public partial class BuildTrainRecording
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void BuildTrainTestRun()
        {
        	string temp = System.Environment.GetEnvironmentVariable("TEMP");
        	XmlSerializer serializer;
        	System.DateTime now = System.DateTime.Now;
        	FileStream fs;
        	string request = "";
        	
        	CreateTrainTest test = new CreateTrainTest();
              	
        	//Build Schedule
        	MIS_TrainScheduleConfig schedule = test.createTrainSchedule(now);
        	TrainScheduleConfig trainSchedule = schedule.toSerializableObject();
            
            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(TrainScheduleConfig));
		    var writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, trainSchedule);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = schedule.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);

            
			//Build CreateTrain
            MIS_TrainSegmentConfig train = test.createTrain(now);
            TrainSegmentConfig trainSegment = train.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(TrainSegmentConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, trainSegment);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = train.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
			
			
			//Build Consist Summary
			MIS_TrainConsistSummaryConfig consist = test.createTrainConsistSummary(now);
            TrainConsistSummaryConfig trainConsist = consist.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(TrainConsistSummaryConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, trainConsist);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = consist.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
		               
            
			//Build Crew Members
            MIS_CrewMemberConfig crew = test.createCrewMember(now);
            CrewMemberConfig crewMember = crew.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(CrewMemberConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, crewMember);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = crew.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
            
            
            //Build Delays
            MIS_TrainDelayConfig delay1 = test.createDelay1(now);
            TrainDelayConfig trainDelay1 = delay1.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(TrainDelayConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, trainDelay1);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = delay1.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
            
            
            MIS_TrainDelayConfig delay2 = test.createDelay1(now);
            TrainDelayConfig trainDelay2 = delay1.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(TrainDelayConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, trainDelay2);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = delay2.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
            
            
            //Build Engine Consist

            MIS_EngineConsistConfig engine = test.createEngineConsist(now);
            EngineConsistConfig engineConsist = engine.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(EngineConsistConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, engineConsist);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = engine.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
   
		    
            //Build Rail Car
            MIS_RailCarConsistConfig rail = test.createRailCar(now);
            RailCarConsistConfig railCar = rail.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(RailCarConsistConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, railCar);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = rail.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
		    
            
            //Build EOT
            MIS_EOTCabooseConfig eot = test.createEot(now);
            EOTCabooseConfig eotCaboose = eot.toSerializableObject();

            fs = File.Create(temp+"/temp.request");

            serializer = new XmlSerializer(typeof(EOTCabooseConfig));
		    writer = new MyXmlTextWriter(fs);
		    serializer.Serialize(writer, eotCaboose);
		    fs.Close();
		    
		    request = File.ReadAllText(temp+"/temp.request");
		    request = eot.toSteMessageHeader(request);
		    System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
		    
		    string date = now.ToString("dd");
		    SteOccupancyCollection.initializeVehicle("1001 "+date,"500307", "Freight", "4000", "55", "0", "UpBound", "CURRENT");
        }
		    
		public void ClearSignal()
        {    
		    PDS_CORE.Code_Utils.Signaling.ClearSignal("Desk 05: McComb 1-Montgomery", "500304");
		    PDS_CORE.Code_Utils.Signaling.ClearSignal("Desk 05: McComb 1-Montgomery", "500234");
        }
    }
}