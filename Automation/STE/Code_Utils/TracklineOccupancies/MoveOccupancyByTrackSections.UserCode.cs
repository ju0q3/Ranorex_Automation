///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using STE.Code_Utils;

namespace STE.Code_Utils.TracklineOccupancies
{
    public partial class MoveOccupancyByTrackSections
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void MoveOccupancyByTrackSectionsFunction(string trackSections, int timeBetweenMovementsSeconds, int optionalNumberOfSectionForOccupancy, bool optionalInBackground, bool keepFinalOccupancy, bool placeFirstOccupancy)
        {
        	if (!optionalInBackground) {
        		MoveOccupancies(trackSections, timeBetweenMovementsSeconds, optionalNumberOfSectionForOccupancy, keepFinalOccupancy, placeFirstOccupancy);
        		return;
        	} else {
        		var thread = new Thread(() => MoveOccupancies(trackSections, timeBetweenMovementsSeconds, optionalNumberOfSectionForOccupancy, keepFinalOccupancy, placeFirstOccupancy));
        		thread.Start();
        		return;
        	}
        }
        
        public void MoveOccupancies(string trackSections, int timeBetweenMovementsSeconds, int optionalNumberOfSectionForOccupancy, bool keepFinalOccupancy, bool placeFirstOccupancy) {
        	//string trackSection = "";
        	if (optionalNumberOfSectionForOccupancy == 0) {
        		Ranorex.Report.Info("Length of Occupancy cannot be zero, assuming it should be one.");
        		optionalNumberOfSectionForOccupancy = 1;
        	}
        	string[] trackSectionsArray = trackSections.Split('|');
        	Ranorex.Report.Info("TestStep","Moving train via occupancy from track " + trackSectionsArray[0] + " to " + trackSectionsArray[trackSectionsArray.Length - 1]);
        	int count = 0;
        	foreach(string trackSection in trackSectionsArray) {
        		if (count == 0 && !placeFirstOccupancy) {
        			count++;
        			continue;
        		}
        		Ranorex.Report.Info("TestStep", "Move Occupancy to Track Section "+trackSection);
        		SteOccupancyCollection.manualOccupancy(trackSection,"Occupied");
        		if (count >= optionalNumberOfSectionForOccupancy) {
        			SteOccupancyCollection.manualOccupancy(trackSectionsArray[count - optionalNumberOfSectionForOccupancy],"NotOccupied");
        			Ranorex.Report.Info("TestStep", "Removing Occupancy for "+trackSectionsArray[count - optionalNumberOfSectionForOccupancy]);
        		}
        		count++;
        		Ranorex.Delay.Seconds(timeBetweenMovementsSeconds);
        	}
        	count--;
        	if (!keepFinalOccupancy) {
        		for (int i = 0; i < optionalNumberOfSectionForOccupancy; i++) {
        			SteOccupancyCollection.manualOccupancy(trackSectionsArray[count - i],"NotOccupied");
        			Ranorex.Report.Info("TestStep", "Removing Occupancy for "+trackSectionsArray[count - i]);
        		}
        	}
        	return;
        }

    }
}
