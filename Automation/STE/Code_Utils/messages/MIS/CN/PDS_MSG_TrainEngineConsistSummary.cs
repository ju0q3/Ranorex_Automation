//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Net.Sockets;
using System.Net;
using System.Xml;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using STE.Code_Utils.MessageQueues;

using PDS_CORE.Code_Utils;

// 
// This source code was auto-generated by xsd, Version=4.7.2556.0.
// 
namespace STE.Code_Utils.messages.MIS.CN
{

    public partial class MIS_TrainEngineConsistSummaryConfig {
        private string thisMSGINFO;
        private MIS_TrainEngineConsistSummaryConfigHEADER thisHEADER;
        private MIS_TrainEngineConsistSummaryConfigCONTENT thisCONTENT;
        
        private static List<MIS_EngineConsistConfigENGINE_RECORD> engine_records = new List<MIS_EngineConsistConfigENGINE_RECORD>();
        public static bool useNewEngine = true;

        public string MSGINFO {
        	get { return this.thisMSGINFO; }
            set { this.thisMSGINFO = value; }
        }
 
    	public MIS_TrainEngineConsistSummaryConfigHEADER HEADER {
            get { return this.thisHEADER; }
            set { this.thisHEADER = value; }
        }

        public MIS_TrainEngineConsistSummaryConfigCONTENT CONTENT {
            get { return this.thisCONTENT; }
            set { this.thisCONTENT = value; }
        }
        
        public static void createTrainEngineConsistSummaryConfig(
            string protocolid, 
            string msgid, 
            string trace_id, 
            string message_version, 
            
            string engine_protocolid, 
            string engine_msgid, 
            string engine_trace_id, 
            string engine_message_version, 
            string engine_scac, 
            string engine_section, 
            string engine_train_symbol, 
            string engine_origin_date, 
            string engine_assigned_division, 
            string engine_helper_crew_pool_id, 
            string engine_reporting_source, 
            string engine_reporting_location, 
            string engine_reporting_pass_count, 
            string default_data_applied, 
            string purpose,  
            string engines, 
            
            string eot_protocolid, 
            string eot_msgid, 
            string eot_trace_id, 
            string eot_message_version, 
            string eot_scac, 
            string eot_section, 
            string eot_train_symbol, 
            string eot_origin_date, 
            string eot_equipment_code, 
            string eot_origin, 
            string eot_destination, 
            string eot_initial, 
            string eot_number, 
            string eot_working_status, 
            
            string trainconsist_protocolid, 
            string trainconsist_msgid, 
            string trainconsist_trace_id, 
            string trainconsist_message_version, 
            string trainconsist_scac, 
            string trainconsist_section, 
            string trainconsist_train_symbol, 
            string trainconsist_origin_date, 
            string reporting_location, 
            string reporting_pass_count, 
            string reporting_source, 
            string number_of_loads, 
            string number_of_empties, 
            string trailing_tonnage, 
            string train_length, 
            string axles, 
            string operative_brakes, 
            string total_braking_force, 
            string speed_constraint,            
            string max_car_weights,
            string max_car_heights,
            string max_car_widths,
            string hazmat_constraints
        ) {

        	MIS_TrainEngineConsistSummaryConfig trainEngineConsistSummaryConfig = buildTrainEngineConsistSummaryConfig(protocolid, msgid, trace_id, message_version, 
                    engine_protocolid, engine_msgid, engine_trace_id, engine_message_version, engine_scac, engine_section, engine_train_symbol, engine_origin_date, engine_assigned_division, engine_helper_crew_pool_id, engine_reporting_source, engine_reporting_location, engine_reporting_pass_count, default_data_applied, purpose, engines, 
                    eot_protocolid,eot_msgid, eot_trace_id, eot_message_version, eot_scac, eot_section, eot_train_symbol, eot_origin_date, eot_equipment_code, eot_origin, eot_destination, eot_initial, eot_number, eot_working_status,            
                    trainconsist_protocolid, trainconsist_msgid, trainconsist_trace_id, trainconsist_message_version, trainconsist_scac, trainconsist_section, trainconsist_train_symbol, trainconsist_origin_date, reporting_location, reporting_pass_count, 
                    reporting_source, number_of_loads, number_of_empties, trailing_tonnage, train_length, axles, operative_brakes, total_braking_force,  speed_constraint, max_car_weights, max_car_heights, max_car_widths, hazmat_constraints);

            string temp = System.Environment.GetEnvironmentVariable("TEMP");
            XmlSerializer serializer;
            FileStream fs;
            string request = "";

            TrainEngineConsistSummaryConfig trainngineconsistsummaryconfig = trainEngineConsistSummaryConfig.toSerializableObject();
            fs = File.Create(temp+"/temp.request");
            serializer = new XmlSerializer(typeof(TrainEngineConsistSummaryConfig));
            var writer = new SteXmlTextWriter(fs);
            serializer.Serialize(writer, trainngineconsistsummaryconfig);
            fs.Close();

            request = File.ReadAllText(temp+"/temp.request");
            request = trainEngineConsistSummaryConfig.toSteMessageHeader(request);
            System.IO.File.WriteAllText(SteUtils.getOutboundDir()+SteUtils.getFileName(), request);
        }
        
        public string toSteMessageHeader(string serializedXml, bool remote = false) {
        	int from = serializedXml.IndexOf("<CONTENT>") + "<CONTENT>".Length;
        	int to   = serializedXml.LastIndexOf("</CONTENT>");
        	
        	string header = "";
        	
        	if (!remote)
        	{
        	    header = "PASSTHRU,TrainEngineConsistSummary,";
        	}
        	else
        	{
        	    header = "RanorexAgent:PASSTHRU,TrainEngineConsistSummary,";
        	}

        	string result = header + serializedXml.Substring(from, to-from);
        	
        	return result;
        }
        
        private static MIS_TrainEngineConsistSummaryConfig buildTrainEngineConsistSummaryConfig(
            string protocolid, 
            string msgid, 
            string trace_id, 
            string message_version, 
            
            string engine_protocolid, 
            string engine_msgid, 
            string engine_trace_id, 
            string engine_message_version, 
            string engine_scac, 
            string engine_section, 
            string engine_train_symbol, 
            string engine_origin_date, 
            string engine_assigned_division, 
            string engine_helper_crew_pool_id, 
            string engine_reporting_source, 
            string engine_reporting_location, 
            string engine_reporting_pass_count, 
            string default_data_applied, 
            string purpose,  
            string engines, 
            
            string eot_protocolid, 
            string eot_msgid, 
            string eot_trace_id, 
            string eot_message_version, 
            string eot_scac, 
            string eot_section, 
            string eot_train_symbol, 
            string eot_origin_date, 
            string eot_equipment_code, 
            string eot_origin, 
            string eot_destination, 
            string eot_initial, 
            string eot_number, 
            string eot_working_status, 
            
            string trainconsist_protocolid, 
            string trainconsist_msgid, 
            string trainconsist_trace_id, 
            string trainconsist_message_version, 
            string trainconsist_scac, 
            string trainconsist_section, 
            string trainconsist_train_symbol, 
            string trainconsist_origin_date, 
            string reporting_location, 
            string reporting_pass_count, 
            string reporting_source, 
            string number_of_loads, 
            string number_of_empties, 
            string trailing_tonnage, 
            string train_length, 
            string axles, 
            string operative_brakes, 
            string total_braking_force, 
            string speed_constraint,            
            string max_car_weights,
            string max_car_heights,
            string max_car_widths,
            string hazmat_constraints
        ) {
        	engine_msgid = "EngineConsist";
        	trainconsist_msgid = "TrainConsistSummary";
        	eot_msgid = "EOTCaboose";
        	
        	MIS_TrainEngineConsistSummaryConfig trainEngineConsistSummary = new MIS_TrainEngineConsistSummaryConfig();


        	MIS_TrainEngineConsistSummaryConfigHEADER header = new MIS_TrainEngineConsistSummaryConfigHEADER();
        	header.PROTOCOLID = protocolid;
        	header.MSGID = msgid;
        	header.TRACE_ID = trace_id;
        	header.MESSAGE_VERSION = message_version;
        	

        	
        	MIS_TrainEngineConsistSummaryConfigCONTENT content = new MIS_TrainEngineConsistSummaryConfigCONTENT();
        	
        	
        	MIS_EngineConsistConfig engineConsist = buildEngineConsistConfig(engine_protocolid, engine_msgid, engine_trace_id,engine_message_version, engine_scac, engine_section, engine_train_symbol, engine_assigned_division, engine_helper_crew_pool_id, reporting_source, reporting_location, reporting_pass_count, default_data_applied, purpose, engines);
        	content.ENGINECONSIST = engineConsist;

        	MIS_EOTCabooseConfig eotCaboose = buildEOTCabooseConfig(eot_protocolid, eot_msgid, eot_trace_id, eot_message_version, eot_scac, eot_section, eot_train_symbol, eot_equipment_code, eot_origin, eot_destination, eot_initial, eot_number, eot_working_status);
         	
        	content.EOTCABOOSE = eotCaboose;

        	
        	MIS_TrainConsistSummaryConfig trainConsistSummary = buildTrainConsistSummaryConfig(trainconsist_protocolid, trainconsist_msgid, trainconsist_trace_id, trainconsist_message_version, trainconsist_scac, trainconsist_section, trainconsist_train_symbol, reporting_location, reporting_pass_count, reporting_source, 
        	                                                                                   number_of_loads, number_of_empties, trailing_tonnage, train_length, axles, operative_brakes, 
        	                                                                                   total_braking_force, speed_constraint, max_car_weights, max_car_heights, max_car_widths, hazmat_constraints);
        	
        	content.TRAINCONSISTSUMMARY = trainConsistSummary;
        	
        	trainEngineConsistSummary.HEADER = header;
        	trainEngineConsistSummary.CONTENT = content;
        	return trainEngineConsistSummary;
        }

        private static MIS_EngineConsistConfig buildEngineConsistConfig( 
            string protocolid,
            string msgid,
            string trace_id,
            string message_version,
            string scac,
            string section, 
            string train_symbol, 
            string assigned_division, 
            string helper_crew_pool_id, 
            string reporting_source, 
            string reporting_location, 
            string reporting_pass_count, 
            string default_data_applied, 
            string purpose, 
            string engines
        ) {

            MIS_EngineConsistConfig engineConsistConfig = new MIS_EngineConsistConfig();

            string temp = System.Environment.GetEnvironmentVariable("TEMP");
            System.DateTime now = System.DateTime.Now;

            MIS_EngineConsistConfigHEADER header = new MIS_EngineConsistConfigHEADER();
            header.PROTOCOLID = protocolid;
            header.MSGID = msgid;
            header.TRACE_ID = trace_id;
            header.MESSAGE_VERSION = message_version;
            
            MIS_EngineConsistConfigCONTENT content = new MIS_EngineConsistConfigCONTENT();
            content.SCAC = scac;
            content.SECTION = section;
            content.TRAIN_SYMBOL = train_symbol;
            content.ORIGIN_DATE = now.ToString("MMddyyyy");
            content.ASSIGNED_DIVISION = assigned_division;
            content.HELPER_CREW_POOL_ID = helper_crew_pool_id;
            content.REPORTING_SOURCE = reporting_source;
            content.REPORTING_LOCATION = reporting_location;
            content.REPORTING_PASS_COUNT = reporting_pass_count;
            content.DEFAULT_DATA_APPLIED = default_data_applied;
            content.PURPOSE = purpose;
			
            //using Defaults should follow the following format, "Defaults|Origin_Location|Destination_Location"
            if (engines.Contains("Defaults")) {
            	string[]engineList = engines.Split('|');
                //MIS_EngineConsistConfigENGINE_RECORD engine_record = new MIS_EngineConsistConfigENGINE_RECORD();
                string ENGINE_INITIAL =         "CN";
                string ENGINE_NUMBER =          engineList[1];
                string ENGINE_POSITION =        "1";
                string ENGINE_ORIENTATION =     "FRONT";
                string ENGINE_LOCK =            "N";
                string ORIGIN_PASS_COUNT =      "1";
                string ORIGIN_LOCATION =        engineList[2];
                string DESTINATION_PASS_COUNT = "";
                string DESTINATION_LOCATION =   "";
                string COMPENSATED_HP =        "3000";
                string GROUP_NUMBER =           "1";
                string MODEL =                 "AUTO";
                string ENGINE_WEIGHT =          "0";
                string ENGINE_LENGTH =          "0";
                string ENGINE_STATUS =          "W";
                string DPU_STATUS =             "";
                string PTS_EQUIPPED =           "N";
                string PTC_EQUIPPED =           "N";
                string LSL_EQUIPPED =           "N";
                string CS_EQUIPPED =            "N";
                string NOTES =                  "";
                
                string LAST_SERVICE_DATE =      "0";
                string LAST_SERVICE_LOCATION =  "";
                string SHUCKER_DEVICE =         "";

                string TEST_DUE_DATE =         "0";
                string TEST_DUE_LOCATION =      "";
               
                string LAST_FUEL_DATE =        "0";
                string LAST_FUEL_LOCATION =    "";
                
                AddEngineRecord(ENGINE_INITIAL, ENGINE_NUMBER, ENGINE_POSITION, ENGINE_ORIENTATION, ENGINE_LOCK, ORIGIN_PASS_COUNT, ORIGIN_LOCATION, DESTINATION_PASS_COUNT, DESTINATION_LOCATION, COMPENSATED_HP, 
                                GROUP_NUMBER, MODEL, ENGINE_WEIGHT, ENGINE_LENGTH, ENGINE_STATUS, DPU_STATUS, PTS_EQUIPPED, PTC_EQUIPPED, LSL_EQUIPPED, CS_EQUIPPED, NOTES,
            	                LAST_SERVICE_DATE, LAST_SERVICE_LOCATION, SHUCKER_DEVICE, TEST_DUE_DATE, TEST_DUE_LOCATION, LAST_FUEL_DATE, LAST_FUEL_LOCATION);
                
                //content.addENGINE_RECORD(engine_record);
                
            } else if (engines.Contains("|")) {
                string[] engineList = engines.Split('|');
                
                // 7/12/2018 - Joe Added mod as workaround for ENGINE_WEIGHT and ENGINE_LENGTH added to EngineConsist so 
                // data would not have to be updated in csv files.
                if (engineList.Length % 26 == 0)
                {
                    int elementCount = 26;
                                
                    for (int i = 0; i < engineList.Length; i+=elementCount)
                    {
                        //MIS_EngineConsistConfigENGINE_RECORD engine_record = new MIS_EngineConsistConfigENGINE_RECORD();
                        //content.addENGINE_RECORD(engine_record);
                        string ENGINE_INITIAL =         engineList[i];
                        string ENGINE_NUMBER =          engineList[i+1];
                        string ENGINE_POSITION =        engineList[i+2];
                        string ENGINE_ORIENTATION =     engineList[i+3];
                        string ENGINE_LOCK =            engineList[i+4];
                        string ORIGIN_PASS_COUNT =      engineList[i+5];
                        string ORIGIN_LOCATION =        engineList[i+6];
                        string DESTINATION_PASS_COUNT = engineList[i+7];
                        string DESTINATION_LOCATION =   engineList[i+8];
                        string COMPENSATED_HP =         engineList[i+9];
                        string GROUP_NUMBER =           engineList[i+10];
                        string MODEL =                  engineList[i+11];
                        string ENGINE_WEIGHT =          "50";
                        string ENGINE_LENGTH =          "40";
                        string ENGINE_STATUS =          engineList[i+12];
                        string DPU_STATUS =             engineList[i+13];
                        string PTS_EQUIPPED =           engineList[i+14];
                        string PTC_EQUIPPED =           engineList[i+15];
                        string LSL_EQUIPPED =           engineList[i+16];
                        string CS_EQUIPPED =            engineList[i+17];
                        string NOTES =                  engineList[i+18];
                        	
                        string LAST_SERVICE_DATE =      engineList[i+19];
                        string LAST_SERVICE_LOCATION =  engineList[i+20];
                        string SHUCKER_DEVICE =         engineList[i+21];
                        
                        string TEST_DUE_DATE =          engineList[i+22];
                        string TEST_DUE_LOCATION =      engineList[i+23];
                        
                        string LAST_FUEL_DATE =         engineList[i+24];
                        string LAST_FUEL_LOCATION =     engineList[i+25];
                        
                        AddEngineRecord(ENGINE_INITIAL, ENGINE_NUMBER, ENGINE_POSITION, ENGINE_ORIENTATION, ENGINE_LOCK, ORIGIN_PASS_COUNT, ORIGIN_LOCATION, DESTINATION_PASS_COUNT, DESTINATION_LOCATION, COMPENSATED_HP, 
                                GROUP_NUMBER, MODEL, ENGINE_WEIGHT, ENGINE_LENGTH, ENGINE_STATUS, DPU_STATUS, PTS_EQUIPPED, PTC_EQUIPPED, LSL_EQUIPPED, CS_EQUIPPED, NOTES,
            	                LAST_SERVICE_DATE, LAST_SERVICE_LOCATION, SHUCKER_DEVICE, TEST_DUE_DATE, TEST_DUE_LOCATION, LAST_FUEL_DATE, LAST_FUEL_LOCATION);
                        //content.addENGINE_RECORD(engine_record); 
                    }
                }
                else if (engineList.Length % 28 == 0)
                {
                    int elementCount = 28;
                                
                    for (int i = 0; i < engineList.Length; i+=elementCount)
                    {
                        //MIS_EngineConsistConfigENGINE_RECORD engine_record = new MIS_EngineConsistConfigENGINE_RECORD();
                        string ENGINE_INITIAL =         engineList[i];
                        string ENGINE_NUMBER =          engineList[i+1];
                        string ENGINE_POSITION =        engineList[i+2];
                        string ENGINE_ORIENTATION =     engineList[i+3];
                        string ENGINE_LOCK =            engineList[i+4];
                        string ORIGIN_PASS_COUNT =      engineList[i+5];
                        string ORIGIN_LOCATION =        engineList[i+6];
                        string DESTINATION_PASS_COUNT = engineList[i+7];
                        string DESTINATION_LOCATION =   engineList[i+8];
                        string COMPENSATED_HP =         engineList[i+9];
                        string GROUP_NUMBER =           engineList[i+10];
                        string MODEL =                  engineList[i+11];
                        string ENGINE_WEIGHT =          engineList[i+12];
                        string ENGINE_LENGTH =          engineList[i+13];
                        string ENGINE_STATUS =          engineList[i+14];
                        string DPU_STATUS =             engineList[i+15];
                        string PTS_EQUIPPED =           engineList[i+16];
                        string PTC_EQUIPPED =           engineList[i+17];
                        string LSL_EQUIPPED =           engineList[i+18];
                        string CS_EQUIPPED =            engineList[i+19];
                        string NOTES =                  engineList[i+20];
                        
                        string LAST_SERVICE_DATE =      engineList[i+21];
                        string LAST_SERVICE_LOCATION =  engineList[i+22];
                        string SHUCKER_DEVICE =         engineList[i+23];
                        
                        string TEST_DUE_DATE =          engineList[i+24];
                        string TEST_DUE_LOCATION =      engineList[i+25];
                        
                        string LAST_FUEL_DATE =         engineList[i+26];
                        string LAST_FUEL_LOCATION =     engineList[i+27];
                        
                        AddEngineRecord(ENGINE_INITIAL, ENGINE_NUMBER, ENGINE_POSITION, ENGINE_ORIENTATION, ENGINE_LOCK, ORIGIN_PASS_COUNT, ORIGIN_LOCATION, DESTINATION_PASS_COUNT, DESTINATION_LOCATION, COMPENSATED_HP, 
                                GROUP_NUMBER, MODEL, ENGINE_WEIGHT, ENGINE_LENGTH, ENGINE_STATUS, DPU_STATUS, PTS_EQUIPPED, PTC_EQUIPPED, LSL_EQUIPPED, CS_EQUIPPED, NOTES,
            	                LAST_SERVICE_DATE, LAST_SERVICE_LOCATION, SHUCKER_DEVICE, TEST_DUE_DATE, TEST_DUE_LOCATION, LAST_FUEL_DATE, LAST_FUEL_LOCATION);
                        //content.addENGINE_RECORD(engine_record);
                    }
                }
            }
            
            foreach (MIS_EngineConsistConfigENGINE_RECORD record in engine_records) {
            	content.addENGINE_RECORD(record);
            }
            engine_records.Clear();

            engineConsistConfig.HEADER = header;
            engineConsistConfig.CONTENT = content;
            
            return engineConsistConfig;
        }        
        
        public static void AddEngineRecord(string engineInitial, string engineNumber, string enginePosition, string engineOrientation, string engineLock, string originPassCount, string originLocation, 
                                           string destinationPassCount, string destinationLocation, string compensatedHp, string groupNumber, string model, string engineWeight, string engineLength,
                                           string engineStatus, string dpuStatus, string ptsEquipped, string ptcEquipped, string lslEquipped, string csEquipped, string notes, string lastServiceDate,
                                           string lastServiceLocation, string shuckerDevice, string testDueDate, string testDueLocation, string lastFuelDate, string lastFuelLocation)
        {
        	System.DateTime now = System.DateTime.Now;
        	MIS_EngineConsistConfigENGINE_RECORD newEngineRecord = new MIS_EngineConsistConfigENGINE_RECORD();
        	
        	newEngineRecord.ENGINE_INITIAL =         engineInitial;
            newEngineRecord.ENGINE_NUMBER =          engineNumber;
            newEngineRecord.ENGINE_POSITION =        enginePosition;
            newEngineRecord.ENGINE_ORIENTATION =     engineOrientation;
            newEngineRecord.ENGINE_LOCK =            engineLock;
            newEngineRecord.ORIGIN_PASS_COUNT =      originPassCount;
            newEngineRecord.ORIGIN_LOCATION =        originLocation;
            newEngineRecord.DESTINATION_PASS_COUNT = destinationPassCount;
            newEngineRecord.DESTINATION_LOCATION =   destinationLocation;
            newEngineRecord.COMPENSATED_HP =         compensatedHp;
            newEngineRecord.GROUP_NUMBER =           groupNumber;
            newEngineRecord.MODEL =                  model;
            if (useNewEngine) {
            	newEngineRecord.ENGINE_WEIGHT =          engineWeight;
            	newEngineRecord.ENGINE_LENGTH =          engineLength;
            } else {
            	newEngineRecord.ENGINE_WEIGHT =          null;
            	newEngineRecord.ENGINE_LENGTH =          null;
            }
            newEngineRecord.ENGINE_STATUS =          engineStatus;
            newEngineRecord.DPU_STATUS =             dpuStatus;
            newEngineRecord.PTS_EQUIPPED =           ptsEquipped;
            newEngineRecord.PTC_EQUIPPED =           ptcEquipped;
            newEngineRecord.LSL_EQUIPPED =           lslEquipped;
            newEngineRecord.CS_EQUIPPED =            csEquipped;
            newEngineRecord.NOTES =                  notes;
                
            DateTime lastServiceTime = now.AddMinutes(Convert.ToDouble(lastServiceDate));
            newEngineRecord.LAST_SERVICE_DATE =      lastServiceTime.ToString("MMddyyyy");
            newEngineRecord.LAST_SERVICE_LOCATION =  lastServiceLocation;
            newEngineRecord.SHUCKER_DEVICE =         shuckerDevice;
                        
            DateTime testDueTime = now.AddMinutes(Convert.ToDouble(testDueDate));
            newEngineRecord.TEST_DUE_DATE =          testDueTime.ToString("MMddyyyy");
            newEngineRecord.TEST_DUE_LOCATION =      testDueLocation;
                        
            DateTime lastFuelTime = now.AddMinutes(Convert.ToDouble(lastFuelDate));
            newEngineRecord.LAST_FUEL_DATE =         lastFuelTime.ToString("MMddyyyy");
            newEngineRecord.LAST_FUEL_LOCATION =     lastFuelLocation;
            
            engine_records.Add(newEngineRecord);
            return;
        }

        private static MIS_EOTCabooseConfig buildEOTCabooseConfig(
            string protocolid,
            string msgid,
            string trace_id,
            string message_version,
            string scac,
            string section, 
            string train_symbol, 
            string equipment_code, 
            string origin, 
            string destination, 
            string initial, 
            string number, 
            string working_status
        ) {
            MIS_EOTCabooseConfig eOTCabooseConfig = new MIS_EOTCabooseConfig();

            string temp = System.Environment.GetEnvironmentVariable("TEMP");
            System.DateTime now = System.DateTime.Now;

            MIS_EOTCabooseConfigHEADER header = new MIS_EOTCabooseConfigHEADER();
            header.PROTOCOLID = protocolid;
            header.MSGID = msgid;
            header.TRACE_ID = trace_id;
            header.MESSAGE_VERSION = message_version;
            
            MIS_EOTCabooseConfigCONTENT content = new MIS_EOTCabooseConfigCONTENT();
            content.SCAC = scac;
            content.SECTION = section;
            content.TRAIN_SYMBOL = train_symbol;
            content.ORIGIN_DATE = now.ToString("MMddyyyy");
            content.EQUIPMENT_CODE = equipment_code;
            content.ORIGIN = origin;
            content.DESTINATION = destination;
            content.INITIAL = initial;
            content.NUMBER = number;
            content.WORKING_STATUS = working_status;

            eOTCabooseConfig.HEADER = header;
            eOTCabooseConfig.CONTENT = content;
            return eOTCabooseConfig;
        }
        	
        private static MIS_TrainConsistSummaryConfig buildTrainConsistSummaryConfig (
            string protocolid,
            string msgid,
            string trace_id,
            string message_version,
            string scac,
            string section, 
            string train_symbol, 
            string reporting_location, 
            string reporting_pass_count, 
            string reporting_source, 
            string number_of_loads, 
            string number_of_empties, 
            string trailing_tonnage, 
            string train_length, 
            string axles, 
            string operative_brakes, 
            string total_braking_force,
            string speed_constraint,            
            string max_car_weights,
            string max_car_heights,
            string max_car_widths,
            string hazmat_constraints
        ) {
            MIS_TrainConsistSummaryConfig trainConsistSummaryConfig = new MIS_TrainConsistSummaryConfig();

            string temp = System.Environment.GetEnvironmentVariable("TEMP");

            System.DateTime now = System.DateTime.Now;

            MIS_TrainConsistSummaryConfigHEADER header = new MIS_TrainConsistSummaryConfigHEADER();
            header.PROTOCOLID = protocolid;
            header.MSGID = msgid;
            header.TRACE_ID = trace_id;
            header.MESSAGE_VERSION = message_version;

            MIS_TrainConsistSummaryConfigCONTENT content = new MIS_TrainConsistSummaryConfigCONTENT();
            content.SCAC = scac;
            content.SECTION = section;
            content.TRAIN_SYMBOL = train_symbol;
            content.ORIGIN_DATE = now.ToString("MMddyyyy");
            content.REPORTING_LOCATION = reporting_location;
            content.REPORTING_PASS_COUNT = reporting_pass_count;
            content.REPORTING_SOURCE = reporting_source;
            content.NUMBER_OF_LOADS = number_of_loads;
            content.NUMBER_OF_EMPTIES = number_of_empties;
            content.TRAILING_TONNAGE = trailing_tonnage;
            content.TRAIN_LENGTH = train_length;
            content.AXLES = axles;
            content.OPERATIVE_BRAKES = operative_brakes;
            content.TOTAL_BRAKING_FORCE = total_braking_force;

            if (max_car_weights.Contains("|"))
            {
                string[] weightList = max_car_weights.Split('|');
                int elementCount = 3;
                            
                for (int i = 0; i < weightList.Length; i+=elementCount)
                {
                    MIS_TrainConsistSummaryConfigMAX_CAR_WEIGHT_CONSTRAINT max_car_weight_constraint = new MIS_TrainConsistSummaryConfigMAX_CAR_WEIGHT_CONSTRAINT();
                    max_car_weight_constraint.MAX_CAR_WEIGHT =               weightList[i];
                    max_car_weight_constraint.MAX_CAR_WEIGHT_TO =            weightList[i+1];
                    max_car_weight_constraint.MAX_CAR_WEIGHT_TO_PASS_COUNT = weightList[i+2];
                    content.addMAX_CAR_WEIGHT_CONSTRAINT(max_car_weight_constraint);
                }
            }
            
            if (max_car_heights.Contains("|"))
            {
                string[] heightList = max_car_heights.Split('|');
                int elementCount = 3;
                
                for (int i = 0; i < heightList.Length; i+=elementCount)
                {
                    MIS_TrainConsistSummaryConfigMAX_CAR_HEIGHT_CONSTRAINT max_car_height_constraint = new MIS_TrainConsistSummaryConfigMAX_CAR_HEIGHT_CONSTRAINT();
                    max_car_height_constraint.MAX_CAR_HEIGHT =               heightList[i];
                    max_car_height_constraint.MAX_CAR_HEIGHT_TO =            heightList[i+1];
                    max_car_height_constraint.MAX_CAR_HEIGHT_TO_PASS_COUNT = heightList[i+2];
                    content.addMAX_CAR_HEIGHT_CONSTRAINT(max_car_height_constraint);
                }
            }

            if (max_car_widths.Contains("|"))
            {
                string[] widthList = max_car_widths.Split('|');
                int elementCount = 3;
                
                for (int i = 0; i < widthList.Length; i+=elementCount)
                {
                    MIS_TrainConsistSummaryConfigMAX_CAR_WIDTH_CONSTRAINT max_car_width_constraint = new MIS_TrainConsistSummaryConfigMAX_CAR_WIDTH_CONSTRAINT();
                    max_car_width_constraint.MAX_CAR_WIDTH =               widthList[i];
                    max_car_width_constraint.MAX_CAR_WIDTH_TO =            widthList[i+1];
                    max_car_width_constraint.MAX_CAR_WIDTH_TO_PASS_COUNT = widthList[i+2];
                    content.addMAX_CAR_WIDTH_CONSTRAINT(max_car_width_constraint);
                }
            }
            
            if (hazmat_constraints.Contains("|"))
            {
                string[] hazmatList = hazmat_constraints.Split('|');
                int elementCount = 3;
                
                for (int i = 0; i < hazmatList.Length; i+=elementCount)
                {
                    MIS_TrainConsistSummaryConfigHAZMAT_CONSTRAINT hazmat_constraint = new MIS_TrainConsistSummaryConfigHAZMAT_CONSTRAINT();
                    hazmat_constraint.KEY_TRAIN_INDICATOR =     hazmatList[i];
                    hazmat_constraint.HAZMAT_TRAIN_TO =         hazmatList[i+1];
                    hazmat_constraint.KEY_TRAIN_TO_PASS_COUNT = hazmatList[i+2];
                    content.addHAZMAT_CONSTRAINT(hazmat_constraint);
                }
            }
        
            trainConsistSummaryConfig.HEADER = header;
            trainConsistSummaryConfig.CONTENT = content;

            return trainConsistSummaryConfig;
        }
        
        public TrainEngineConsistSummaryConfig toSerializableObject() {
            TrainEngineConsistSummaryConfig trainEngineConsistSummaryConfig = new TrainEngineConsistSummaryConfig();
            trainEngineConsistSummaryConfig.Items = new object[2];

            TrainEngineConsistSummaryConfigHEADER header = new TrainEngineConsistSummaryConfigHEADER();
            if (this.HEADER.PROTOCOLID != null) {
                header.PROTOCOLID = new TrainEngineConsistSummaryConfigHEADERPROTOCOLID[1];
                TrainEngineConsistSummaryConfigHEADERPROTOCOLID protocolid = new TrainEngineConsistSummaryConfigHEADERPROTOCOLID();
                protocolid.Value = this.HEADER.PROTOCOLID;
                header.PROTOCOLID[0] = protocolid;
            }

            if (this.HEADER.MSGID != null) {
                header.MSGID = new TrainEngineConsistSummaryConfigHEADERMSGID[1];
                TrainEngineConsistSummaryConfigHEADERMSGID msgid = new TrainEngineConsistSummaryConfigHEADERMSGID();
                msgid.Value = this.HEADER.MSGID;
                header.MSGID[0] = msgid;
            }

            if (this.HEADER.TRACE_ID != null) {
                header.TRACE_ID = new TrainEngineConsistSummaryConfigHEADERTRACE_ID[1];
                TrainEngineConsistSummaryConfigHEADERTRACE_ID trace_id = new TrainEngineConsistSummaryConfigHEADERTRACE_ID();
                trace_id.Value = this.HEADER.TRACE_ID;
                header.TRACE_ID[0] = trace_id;
            }

            if (this.HEADER.MESSAGE_VERSION != null) {
                header.MESSAGE_VERSION = new TrainEngineConsistSummaryConfigHEADERMESSAGE_VERSION[1];
                TrainEngineConsistSummaryConfigHEADERMESSAGE_VERSION message_version = new TrainEngineConsistSummaryConfigHEADERMESSAGE_VERSION();
                message_version.Value = this.HEADER.MESSAGE_VERSION;
                header.MESSAGE_VERSION[0] = message_version;
            }

            TrainEngineConsistSummaryConfigCONTENT content = new TrainEngineConsistSummaryConfigCONTENT();

            EOTCabooseConfigMSGINFO msginfo = new EOTCabooseConfigMSGINFO();
            if (this.CONTENT != null)
            {
            	if (this.CONTENT.ENGINECONSIST != null)
            	{
            		EngineConsistConfig engine = this.CONTENT.ENGINECONSIST.toSerializableObject();
            		content.ENGINECONSIST = engine;
            	}
            	
            	if (this.CONTENT.EOTCABOOSE != null)
            	{
            		EOTCabooseConfig caboose = this.CONTENT.EOTCABOOSE.toSerializableObject();
            		content.EOTCABOOSE = caboose;
            	}
            	
            	if (this.CONTENT.TRAINCONSISTSUMMARY != null)
            	{
            		TrainConsistSummaryConfig trainConsist = this.CONTENT.TRAINCONSISTSUMMARY.toSerializableObject();
            		content.TRAINCONSISTSUMMARY = trainConsist;
            	}
            	
            }



            trainEngineConsistSummaryConfig.Items[0] = header;
            trainEngineConsistSummaryConfig.Items[1] = content;
            return trainEngineConsistSummaryConfig;
        }
    }


    public partial class MIS_TrainEngineConsistSummaryConfigHEADER {
        private string thisPROTOCOLID = "";
        private string thisMSGID = "";
        private string thisTRACE_ID = "";
        private string thisMESSAGE_VERSION = "";

        public string PROTOCOLID {
            get { return this.thisPROTOCOLID; }
            set { this.thisPROTOCOLID = value; }
        }

        public string MSGID {
            get { return this.thisMSGID; }
            set { this.thisMSGID = value; }
        }

        public string TRACE_ID {
            get { return this.thisTRACE_ID; }
            set { this.thisTRACE_ID = value; }
        }

        public string MESSAGE_VERSION {
            get { return this.thisMESSAGE_VERSION; }
            set { this.thisMESSAGE_VERSION = value; }
        }

    }	
	
    public partial class MIS_TrainEngineConsistSummaryConfigCONTENT {
        private MIS_EngineConsistConfig thisEngineConsist;
        private MIS_EOTCabooseConfig thisEOTCaboose;
        private MIS_TrainConsistSummaryConfig thisTrainConsistSummary;


        public MIS_EngineConsistConfig ENGINECONSIST {
            get { return this.thisEngineConsist; }
            set { this.thisEngineConsist = value; }
        }

        public MIS_EOTCabooseConfig EOTCABOOSE {
            get { return this.thisEOTCaboose; }
            set { this.thisEOTCaboose = value; }
        }

        public MIS_TrainConsistSummaryConfig TRAINCONSISTSUMMARY {
            get { return this.thisTrainConsistSummary; }
            set { this.thisTrainConsistSummary = value; }
        }

    }

		
		
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class TrainEngineConsistSummaryConfig {
	    
	    private object[] itemsField;
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("CONTENT", typeof(TrainEngineConsistSummaryConfigCONTENT), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    [System.Xml.Serialization.XmlElementAttribute("HEADER", typeof(TrainEngineConsistSummaryConfigHEADER), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    [System.Xml.Serialization.XmlElementAttribute("MSGINFO", typeof(TrainEngineConsistSummaryConfigMSGINFO), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public object[] Items {
	        get {
	            return this.itemsField;
	        }
	        set {
	            this.itemsField = value;
	        }
	    }
	}
	
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigCONTENT {
	    
	    private EngineConsistConfig engineConsistField;
	    private EOTCabooseConfig eotCabooseField;	    
	    private TrainConsistSummaryConfig trainConsistSummaryField;	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("ENGINECONSIST", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public EngineConsistConfig ENGINECONSIST {
	        get {
	            return this.engineConsistField;
	        }
	        set {
	            this.engineConsistField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("EOTCABOOSE", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public EOTCabooseConfig EOTCABOOSE {
	        get {
	            return this.eotCabooseField;
	        }
	        set {
	            this.eotCabooseField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("TRAINCONSISTSUMMARY", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public TrainConsistSummaryConfig TRAINCONSISTSUMMARY {
	        get {
	            return this.trainConsistSummaryField;
	        }
	        set {
	            this.trainConsistSummaryField = value;
	        }
	    }
    }
		
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigCONTENTEngineConsist {
	    
	    private EngineConsistConfigHEADER[] HEADERField;
	    
	    private EngineConsistConfigCONTENT[] CONTENTField;
		
			    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("HEADER", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public EngineConsistConfigHEADER[] HEADER {
	        get {
	            return this.HEADERField;
	        }
	        set {
	            this.HEADERField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("CONTENT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public EngineConsistConfigCONTENT[] CONTENT {
	        get {
	            return this.CONTENTField;
	        }
	        set {
	            this.CONTENTField = value;
	        }
	    }
	}
		

    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigCONTENTEotCaboose {
	    
	    private EOTCabooseConfigHEADER[] HEADERField;
	    
	    private EOTCabooseConfigCONTENT[] CONTENTField;
	    
	    private EOTCabooseConfigMSGINFO[] MSGINFOField;
		
			    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("HEADER", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public EOTCabooseConfigHEADER[] HEADER {
	        get {
	            return this.HEADERField;
	        }
	        set {
	            this.HEADERField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("CONTENT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public EOTCabooseConfigCONTENT[] CONTENT {
	        get {
	            return this.CONTENTField;
	        }
	        set {
	            this.CONTENTField = value;
	        }
	    }
	    
	    [System.Xml.Serialization.XmlElementAttribute("MSGINFO", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public EOTCabooseConfigMSGINFO[] MSGINFO {
	        get {
	            return this.MSGINFOField;
	        }
	        set {
	            this.MSGINFOField = value;
	        }
	    }
	}
		
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigCONTENTTrainConsistSummary {
	    
	    private TrainConsistSummaryConfigHEADER[] HEADERField;
	    
	    private TrainConsistSummaryConfigCONTENT[] CONTENTField;
		
			    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("HEADER", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public TrainConsistSummaryConfigHEADER[] HEADER {
	        get {
	            return this.HEADERField;
	        }
	        set {
	            this.HEADERField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("CONTENT", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public TrainConsistSummaryConfigCONTENT[] CONTENT {
	        get {
	            return this.CONTENTField;
	        }
	        set {
	            this.CONTENTField = value;
	        }
	    }
	}
		
		
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigHEADER {
	    
	    private TrainEngineConsistSummaryConfigHEADERPROTOCOLID[] pROTOCOLIDField;
	    
	    private TrainEngineConsistSummaryConfigHEADERMSGID[] mSGIDField;
	    
	    private TrainEngineConsistSummaryConfigHEADERTRACE_ID[] tRACE_IDField;
	    
	    private TrainEngineConsistSummaryConfigHEADERMESSAGE_VERSION[] mESSAGE_VERSIONField;
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("PROTOCOLID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public TrainEngineConsistSummaryConfigHEADERPROTOCOLID[] PROTOCOLID {
	        get {
	            return this.pROTOCOLIDField;
	        }
	        set {
	            this.pROTOCOLIDField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("MSGID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public TrainEngineConsistSummaryConfigHEADERMSGID[] MSGID {
	        get {
	            return this.mSGIDField;
	        }
	        set {
	            this.mSGIDField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("TRACE_ID", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public TrainEngineConsistSummaryConfigHEADERTRACE_ID[] TRACE_ID {
	        get {
	            return this.tRACE_IDField;
	        }
	        set {
	            this.tRACE_IDField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlElementAttribute("MESSAGE_VERSION", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
	    public TrainEngineConsistSummaryConfigHEADERMESSAGE_VERSION[] MESSAGE_VERSION {
	        get {
	            return this.mESSAGE_VERSIONField;
	        }
	        set {
	            this.mESSAGE_VERSIONField = value;
	        }
	    }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigHEADERPROTOCOLID {
	    
	    private string pds_msg_lengthField;
	    
	    private string pds_msg_mvcelementnameField;
	    
	    private string pds_msg_reqdField;
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_length {
	        get {
	            return this.pds_msg_lengthField;
	        }
	        set {
	            this.pds_msg_lengthField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_mvcelementname {
	        get {
	            return this.pds_msg_mvcelementnameField;
	        }
	        set {
	            this.pds_msg_mvcelementnameField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_reqd {
	        get {
	            return this.pds_msg_reqdField;
	        }
	        set {
	            this.pds_msg_reqdField = value;
	        }
	    }
	    
	    [System.Xml.Serialization.XmlTextAttribute()]
	    public string Value {get; set;}

    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigHEADERMSGID {
	    
	    private string pds_msg_lengthField;
	    
	    private string pds_msg_mvcelementnameField;
	    
	    private string pds_msg_reqdField;
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_length {
	        get {
	            return this.pds_msg_lengthField;
	        }
	        set {
	            this.pds_msg_lengthField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_mvcelementname {
	        get {
	            return this.pds_msg_mvcelementnameField;
	        }
	        set {
	            this.pds_msg_mvcelementnameField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_reqd {
	        get {
	            return this.pds_msg_reqdField;
	        }
	        set {
	            this.pds_msg_reqdField = value;
	        }
	    }
	    
	    [System.Xml.Serialization.XmlTextAttribute()]
	    public string Value {get; set;}
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigHEADERTRACE_ID {
	    
	    private string pds_msg_lengthField;
	    
	    private string pds_msg_mvcelementnameField;
	    
	    private string pds_msg_reqdField;
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_length {
	        get {
	            return this.pds_msg_lengthField;
	        }
	        set {
	            this.pds_msg_lengthField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_mvcelementname {
	        get {
	            return this.pds_msg_mvcelementnameField;
	        }
	        set {
	            this.pds_msg_mvcelementnameField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_reqd {
	        get {
	            return this.pds_msg_reqdField;
	        }
	        set {
	            this.pds_msg_reqdField = value;
	        }
	    }
	    
	    [System.Xml.Serialization.XmlTextAttribute()]
	    public string Value {get; set;}
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigHEADERMESSAGE_VERSION {
	    
	    private string pds_msg_lengthField;
	    
	    private string pds_msg_mvcelementnameField;
	    
	    private string pds_msg_reqdField;
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_length {
	        get {
	            return this.pds_msg_lengthField;
	        }
	        set {
	            this.pds_msg_lengthField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_mvcelementname {
	        get {
	            return this.pds_msg_mvcelementnameField;
	        }
	        set {
	            this.pds_msg_mvcelementnameField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_reqd {
	        get {
	            return this.pds_msg_reqdField;
	        }
	        set {
	            this.pds_msg_reqdField = value;
	        }
	    }
	    
	    [System.Xml.Serialization.XmlTextAttribute()]
	    public string Value {get; set;}
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TrainEngineConsistSummaryConfigMSGINFO {
	    
	    private string pds_msg_delimiterField;
	    
	    private string pds_msg_msgtypeField;
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_delimiter {
	        get {
	            return this.pds_msg_delimiterField;
	        }
	        set {
	            this.pds_msg_delimiterField = value;
	        }
	    }
	    
	    /// <remarks/>
	    [System.Xml.Serialization.XmlAttributeAttribute()]
	    public string pds_msg_msgtype {
	        get {
	            return this.pds_msg_msgtypeField;
	        }
	        set {
	            this.pds_msg_msgtypeField = value;
	        }
	    }
 	    
	    [System.Xml.Serialization.XmlTextAttribute()]
	    public string Value {get; set;}
    }
		
		
}				