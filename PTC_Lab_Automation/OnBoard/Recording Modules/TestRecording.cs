///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace OnBoard.Recording_Modules
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The TestRecording recording.
    /// </summary>
    [TestModule("5a1b935c-b4f2-4639-a3ea-13ab83bf7d16", ModuleType.Recording, 1)]
    public partial class TestRecording : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::OnBoard.OnBoardRepository repository.
        /// </summary>
        public static global::OnBoard.OnBoardRepository repo = global::OnBoard.OnBoardRepository.Instance;

        static TestRecording instance = new TestRecording();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public TestRecording()
        {
            NewVariable = "green";
            colorExists = "True";
            colorStringExists = "True";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static TestRecording Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewVariable;

        /// <summary>
        /// Gets or sets the value of variable NewVariable.
        /// </summary>
        [TestVariable("d64c7e8f-b65e-4ffe-89c5-0ab876ad1a46")]
        public string NewVariable
        {
            get { return _NewVariable; }
            set { _NewVariable = value; }
        }

        string _colorExists;

        /// <summary>
        /// Gets or sets the value of variable colorExists.
        /// </summary>
        [TestVariable("398a9e0e-ac94-48f5-8fc9-99300e7b32c7")]
        public string colorExists
        {
            get { return _colorExists; }
            set { _colorExists = value; }
        }

        string _colorStringExists;

        /// <summary>
        /// Gets or sets the value of variable colorStringExists.
        /// </summary>
        [TestVariable("aad321fe-32dc-4710-a39d-54423aecbc34")]
        public string colorStringExists
        {
            get { return _colorStringExists; }
            set { _colorStringExists = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //TestFunc();
            //Delay.Milliseconds(0);
            
            //UserCodeCollections.FieldSimulator.StartAndLoadFieldSimulatorScenario_FieldSimulator("AGS North_LIEE.scn");
            //Delay.Milliseconds(0);
            
            //ValidateBannerColor(NewVariable, ValueConverter.ArgumentFromString<bool>("colorExists", colorExists));
            //Delay.Milliseconds(0);
            
            UserCodeCollections.OnBoardFunctions.ValidateTopBannerColor_OnBoard(NewVariable, colorStringExists);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
