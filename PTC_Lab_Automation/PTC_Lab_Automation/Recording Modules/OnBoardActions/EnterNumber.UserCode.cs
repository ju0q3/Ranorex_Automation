///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using STE;

namespace PTC_Lab_Automation.Recording_Modules.OnBoardActions
{
    public partial class EnterNumber
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        /// <summary>
        /// Number Type can be empNum for Employee Id, tcNum for TC# and empty for any other number to be entered
        /// </summary>
        /// <param name="numericDigits"></param>
        /// <param name="numberType"></param>
        public void EnterNumber_OnBoard(string numericDigits, string numberType)
        {
            //Check if the value is 'Special' Like the login name or password
            if (numericDigits.Equals("$PTCLoginId"))
            {
                try {
                    numericDigits = TestSuite.Current.Parameters["PTCLoginId"];
                } catch {
                    Ranorex.Report.Failure("Could not get parameter {PTCLoginId}, unable to input number");
                    return;
                }
            } else if (numericDigits.Equals("$PTCLoginPin"))
            {
                try {
                    numericDigits = TestSuite.Current.Parameters["PTCLoginPin"];
                } catch {
                    Ranorex.Report.Failure("Could not get parameter {PTCLoginPin}, unable to input number");
                    return;
                }
            } else if (numericDigits.Equals("$PrimaryTrainIdTrainClearance"))
            {
                string trainSeed = PDS_NS.UserCodeCollections.NS_LabTrains.PrimaryTrainSeed;
                
                //Get the Train Clearance number from ADMS
                numericDigits = PDS_CORE.Code_Utils.NS_TrainID.GetTrainClearanceNumber(trainSeed);
                if (numericDigits.Equals(""))
                {
                    WinForms.MessageBox.Show("Could not get Train Clearance from ADMS for Train with seed {" + trainSeed + "}. " +
                                             "Please check train clearance status of train and oracle connections. " +
                                             "Please manually input Train Clearance into onboard before clicking Ok.", "Error",
                                             WinForms.MessageBoxButtons.OK);
                }
                if(numericDigits.Length==3)
                {
                	numericDigits='0'+numericDigits;
                }
                else if(numericDigits.Length==2)
                {
                	numericDigits="00"+numericDigits;
                }
                else if(numericDigits.Length==1)
                {
                	numericDigits="000"+numericDigits;
                }
            }
            string parameters = string.Join("|", new string[]{numericDigits, numberType});
            STE.Code_Utils.Server.SendCommandToOnboard("OnBoard", "EnterNumber_OnBoard", parameters);
        }

    }
}
