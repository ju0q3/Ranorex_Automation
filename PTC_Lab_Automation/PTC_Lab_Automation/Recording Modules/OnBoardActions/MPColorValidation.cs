///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PTC_Lab_Automation.Recording_Modules.OnBoardActions
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The MPColorValidation recording.
    /// </summary>
    [TestModule("6bfc7d66-98f6-48b8-b8d9-7204552d6516", ModuleType.Recording, 1)]
    public partial class MPColorValidation : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PTC_Lab_Automation.Test_ExecutionRepository repository.
        /// </summary>
        public static global::PTC_Lab_Automation.Test_ExecutionRepository repo = global::PTC_Lab_Automation.Test_ExecutionRepository.Instance;

        static MPColorValidation instance = new MPColorValidation();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public MPColorValidation()
        {
            milepost = "";
            color = "";
            milePostOffset = "";
            y_offset = "";
            direction = "";
            fenceOrTrackPositions = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static MPColorValidation Instance
        {
            get { return instance; }
        }

#region Variables

        string _milepost;

        /// <summary>
        /// Gets or sets the value of variable milepost.
        /// </summary>
        [TestVariable("557ab950-8483-4698-a964-3a7f787fd938")]
        public string milepost
        {
            get { return _milepost; }
            set { _milepost = value; }
        }

        string _color;

        /// <summary>
        /// Gets or sets the value of variable color.
        /// </summary>
        [TestVariable("9e6d28bc-6814-4d6c-95ab-3e6c33c5d78d")]
        public string color
        {
            get { return _color; }
            set { _color = value; }
        }

        string _milePostOffset;

        /// <summary>
        /// Gets or sets the value of variable milePostOffset.
        /// </summary>
        [TestVariable("1fd98af6-4936-4ed2-b784-483a8613f8ca")]
        public string milePostOffset
        {
            get { return _milePostOffset; }
            set { _milePostOffset = value; }
        }

        string _y_offset;

        /// <summary>
        /// Gets or sets the value of variable y_offset.
        /// </summary>
        [TestVariable("0baf6b46-5867-41a2-8580-bea9a45fe80c")]
        public string y_offset
        {
            get { return _y_offset; }
            set { _y_offset = value; }
        }

        string _direction;

        /// <summary>
        /// Gets or sets the value of variable direction.
        /// </summary>
        [TestVariable("0ade5751-ab95-4d93-a91f-833f817ea328")]
        public string direction
        {
            get { return _direction; }
            set { _direction = value; }
        }

        string _fenceOrTrackPositions;

        /// <summary>
        /// Gets or sets the value of variable fenceOrTrackPositions.
        /// </summary>
        [TestVariable("611d1355-d3c7-43e9-a5a0-cc39dcceec15")]
        public string fenceOrTrackPositions
        {
            get { return _fenceOrTrackPositions; }
            set { _fenceOrTrackPositions = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            ValidateMPColorValidation(milepost, milePostOffset, y_offset, direction, fenceOrTrackPositions, color);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
