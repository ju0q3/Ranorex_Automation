///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PTC_Lab_Automation.Recording_Modules.OnBoardActions
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The HornVerifyLastBlast recording.
    /// </summary>
    [TestModule("3ffe841c-43df-4410-88d4-27b58760b922", ModuleType.Recording, 1)]
    public partial class HornVerifyLastBlast : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::PTC_Lab_Automation.Test_ExecutionRepository repository.
        /// </summary>
        public static global::PTC_Lab_Automation.Test_ExecutionRepository repo = global::PTC_Lab_Automation.Test_ExecutionRepository.Instance;

        static HornVerifyLastBlast instance = new HornVerifyLastBlast();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public HornVerifyLastBlast()
        {
            minSeconds = "";
            maxSeconds = "";
            hornDuration = "";
            hornWithinSeconds = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static HornVerifyLastBlast Instance
        {
            get { return instance; }
        }

#region Variables

        string _minSeconds;

        /// <summary>
        /// Gets or sets the value of variable minSeconds.
        /// </summary>
        [TestVariable("7abcbd87-2e1e-45ad-b9d0-d9ad4b51bd3c")]
        public string minSeconds
        {
            get { return _minSeconds; }
            set { _minSeconds = value; }
        }

        string _maxSeconds;

        /// <summary>
        /// Gets or sets the value of variable maxSeconds.
        /// </summary>
        [TestVariable("2426389e-b48b-4bd7-80b1-e6421eedf8c8")]
        public string maxSeconds
        {
            get { return _maxSeconds; }
            set { _maxSeconds = value; }
        }

        string _hornDuration;

        /// <summary>
        /// Gets or sets the value of variable hornDuration.
        /// </summary>
        [TestVariable("8d0d259b-a07d-416e-bb28-944032f2bbd9")]
        public string hornDuration
        {
            get { return _hornDuration; }
            set { _hornDuration = value; }
        }

        string _hornWithinSeconds;

        /// <summary>
        /// Gets or sets the value of variable hornWithinSeconds.
        /// </summary>
        [TestVariable("56c36a05-c8d0-4557-9052-16f180c74975")]
        public string hornWithinSeconds
        {
            get { return _hornWithinSeconds; }
            set { _hornWithinSeconds = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            HornVerifyLastBlast_OnBoard(hornDuration, hornWithinSeconds);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
